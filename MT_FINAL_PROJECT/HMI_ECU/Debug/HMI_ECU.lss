
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00003b12  00003ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  008000fa  008000fa  00003c40  2**0
                  ALLOC
  3 .stab         00003228  00000000  00000000  00003c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ed  00000000  00000000  00006e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008205  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 50 1b 	jmp	0x36a0	; 0x36a0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1d 1b 	jmp	0x363a	; 0x363a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <main>
      8a:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ef       	ldi	r26, 0xF2	; 242
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ef       	ldi	r24, 0xF2	; 242
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 1d 	jmp	0x3a2e	; 0x3a2e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == 0)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	a9 f4       	brne	.+42     	; 0xdb4 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	97 c0       	rjmp	.+302    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <GPIO_writePin+0xb6>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <GPIO_writePin+0xb2>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == 0)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	88 23       	and	r24, r24
     de0:	a9 f4       	brne	.+42     	; 0xe0c <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	6b c0       	rjmp	.+214    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <GPIO_writePin+0x10e>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <GPIO_writePin+0x10a>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == 0)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 23       	and	r24, r24
     e38:	a9 f4       	brne	.+42     	; 0xe64 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
     e64:	a5 e3       	ldi	r26, 0x35	; 53
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_writePin+0x166>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_writePin+0x162>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == 0)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 23       	and	r24, r24
     e90:	a9 f4       	brne	.+42     	; 0xebc <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	13 c0       	rjmp	.+38     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <GPIO_writePin+0x1be>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <GPIO_writePin+0x1ba>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24

		}

	}

}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	18 f4       	brcc	.+6      	; 0xf10 <GPIO_readPin+0x1e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	10 f0       	brcs	.+4      	; 0xf14 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	82 c0       	rjmp	.+260    	; 0x1018 <GPIO_readPin+0x126>
	}
	else
	{
		switch (port_num)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c 83       	std	Y+4, r19	; 0x04
     f1c:	2b 83       	std	Y+3, r18	; 0x03
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	5c 81       	ldd	r21, Y+4	; 0x04
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	79 f1       	breq	.+94     	; 0xf86 <GPIO_readPin+0x94>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <GPIO_readPin+0x64>
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <GPIO_readPin+0x124>
     f3e:	4b 81       	ldd	r20, Y+3	; 0x03
     f40:	5c 81       	ldd	r21, Y+4	; 0x04
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	b9 f1       	breq	.+110    	; 0xfb6 <GPIO_readPin+0xc4>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_readPin+0x62>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
     f54:	60 c0       	rjmp	.+192    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_readPin+0x7c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_readPin+0x78>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	5d 83       	std	Y+5, r21	; 0x05
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     f82:	1d 82       	std	Y+5, r1	; 0x05
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>
			}

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_readPin+0xac>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_readPin+0xa8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	5d 83       	std	Y+5, r21	; 0x05
     fb0:	33 c0       	rjmp	.+102    	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fb2:	1d 82       	std	Y+5, r1	; 0x05
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>
			}

		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb6:	e3 e3       	ldi	r30, 0x33	; 51
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_readPin+0xdc>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_readPin+0xd8>
     fd2:	ca 01       	movw	r24, r20
     fd4:	81 70       	andi	r24, 0x01	; 1
     fd6:	90 70       	andi	r25, 0x00	; 0
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	5d 83       	std	Y+5, r21	; 0x05
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fe2:	1d 82       	std	Y+5, r1	; 0x05
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>
			}

		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_readPin+0x10c>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_readPin+0x108>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	5d 83       	std	Y+5, r21	; 0x05
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1012:	1d 82       	std	Y+5, r1	; 0x05
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>
			}

		default:
			return LOGIC_LOW;
    1016:	1d 82       	std	Y+5, r1	; 0x05
    1018:	8d 81       	ldd	r24, Y+5	; 0x05

		}
	}

}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x6>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <GPIO_setupPortDirection+0x8>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	90 f5       	brcc	.+100    	; 0x10a4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3c 83       	std	Y+4, r19	; 0x04
    1048:	2b 83       	std	Y+3, r18	; 0x03
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	d1 f0       	breq	.+52     	; 0x1088 <GPIO_setupPortDirection+0x5e>
    1054:	2b 81       	ldd	r18, Y+3	; 0x03
    1056:	3c 81       	ldd	r19, Y+4	; 0x04
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	2c f4       	brge	.+10     	; 0x1068 <GPIO_setupPortDirection+0x3e>
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	61 f0       	breq	.+24     	; 0x107e <GPIO_setupPortDirection+0x54>
    1066:	1e c0       	rjmp	.+60     	; 0x10a4 <GPIO_setupPortDirection+0x7a>
    1068:	2b 81       	ldd	r18, Y+3	; 0x03
    106a:	3c 81       	ldd	r19, Y+4	; 0x04
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	81 f0       	breq	.+32     	; 0x1092 <GPIO_setupPortDirection+0x68>
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	81 f0       	breq	.+32     	; 0x109c <GPIO_setupPortDirection+0x72>
    107c:	13 c0       	rjmp	.+38     	; 0x10a4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107e:	ea e3       	ldi	r30, 0x3A	; 58
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	80 83       	st	Z, r24
    1086:	0e c0       	rjmp	.+28     	; 0x10a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1088:	e7 e3       	ldi	r30, 0x37	; 55
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	80 83       	st	Z, r24
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1092:	e4 e3       	ldi	r30, 0x34	; 52
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	80 83       	st	Z, r24
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <GPIO_writePort+0x8>
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	90 f5       	brcc	.+100    	; 0x112c <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3c 83       	std	Y+4, r19	; 0x04
    10d0:	2b 83       	std	Y+3, r18	; 0x03
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	d1 f0       	breq	.+52     	; 0x1110 <GPIO_writePort+0x5e>
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	3c 81       	ldd	r19, Y+4	; 0x04
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	2c f4       	brge	.+10     	; 0x10f0 <GPIO_writePort+0x3e>
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	61 f0       	breq	.+24     	; 0x1106 <GPIO_writePort+0x54>
    10ee:	1e c0       	rjmp	.+60     	; 0x112c <GPIO_writePort+0x7a>
    10f0:	2b 81       	ldd	r18, Y+3	; 0x03
    10f2:	3c 81       	ldd	r19, Y+4	; 0x04
    10f4:	22 30       	cpi	r18, 0x02	; 2
    10f6:	31 05       	cpc	r19, r1
    10f8:	81 f0       	breq	.+32     	; 0x111a <GPIO_writePort+0x68>
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	83 30       	cpi	r24, 0x03	; 3
    1100:	91 05       	cpc	r25, r1
    1102:	81 f0       	breq	.+32     	; 0x1124 <GPIO_writePort+0x72>
    1104:	13 c0       	rjmp	.+38     	; 0x112c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1106:	eb e3       	ldi	r30, 0x3B	; 59
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	80 83       	st	Z, r24
    110e:	0e c0       	rjmp	.+28     	; 0x112c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	80 83       	st	Z, r24
    1118:	09 c0       	rjmp	.+18     	; 0x112c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    111a:	e5 e3       	ldi	r30, 0x35	; 53
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	80 83       	st	Z, r24
    1122:	04 c0       	rjmp	.+8      	; 0x112c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1124:	e2 e3       	ldi	r30, 0x32	; 50
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
			break;
		}

	}

}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x6>
    1140:	00 d0       	rcall	.+0      	; 0x1142 <GPIO_readPort+0x8>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	10 f0       	brcs	.+4      	; 0x1152 <GPIO_readPort+0x18>
	{
		return 0;
    114e:	1c 82       	std	Y+4, r1	; 0x04
    1150:	34 c0       	rjmp	.+104    	; 0x11ba <GPIO_readPort+0x80>
	}
	else
	{
		switch(port_num)
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3b 83       	std	Y+3, r19	; 0x03
    115a:	2a 83       	std	Y+2, r18	; 0x02
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	9b 81       	ldd	r25, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	91 05       	cpc	r25, r1
    1164:	d1 f0       	breq	.+52     	; 0x119a <GPIO_readPort+0x60>
    1166:	2a 81       	ldd	r18, Y+2	; 0x02
    1168:	3b 81       	ldd	r19, Y+3	; 0x03
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	2c f4       	brge	.+10     	; 0x117a <GPIO_readPort+0x40>
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	9b 81       	ldd	r25, Y+3	; 0x03
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	61 f0       	breq	.+24     	; 0x1190 <GPIO_readPort+0x56>
    1178:	1f c0       	rjmp	.+62     	; 0x11b8 <GPIO_readPort+0x7e>
    117a:	2a 81       	ldd	r18, Y+2	; 0x02
    117c:	3b 81       	ldd	r19, Y+3	; 0x03
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	81 f0       	breq	.+32     	; 0x11a4 <GPIO_readPort+0x6a>
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	91 05       	cpc	r25, r1
    118c:	81 f0       	breq	.+32     	; 0x11ae <GPIO_readPort+0x74>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PINA;
    1190:	e9 e3       	ldi	r30, 0x39	; 57
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	90 81       	ld	r25, Z
    1196:	9c 83       	std	Y+4, r25	; 0x04
    1198:	10 c0       	rjmp	.+32     	; 0x11ba <GPIO_readPort+0x80>
		case PORTB_ID:
			return PINB;
    119a:	e6 e3       	ldi	r30, 0x36	; 54
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	20 81       	ld	r18, Z
    11a0:	2c 83       	std	Y+4, r18	; 0x04
    11a2:	0b c0       	rjmp	.+22     	; 0x11ba <GPIO_readPort+0x80>
		case PORTC_ID:
			return PINC;
    11a4:	e3 e3       	ldi	r30, 0x33	; 51
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	30 81       	ld	r19, Z
    11aa:	3c 83       	std	Y+4, r19	; 0x04
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <GPIO_readPort+0x80>
		case PORTD_ID:
			return PIND;
    11ae:	e0 e3       	ldi	r30, 0x30	; 48
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8c 83       	std	Y+4, r24	; 0x04
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <GPIO_readPort+0x80>
		default:
			return 0;
    11b8:	1c 82       	std	Y+4, r1	; 0x04
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}

}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	60 97       	sbiw	r28, 0x10	; 16
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	62 e0       	ldi	r22, 0x02	; 2
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	63 e0       	ldi	r22, 0x03	; 3
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	64 e0       	ldi	r22, 0x04	; 4
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	65 e0       	ldi	r22, 0x05	; 5
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	66 e0       	ldi	r22, 0x06	; 6
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	67 e0       	ldi	r22, 0x07	; 7
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    122e:	1f 86       	std	Y+15, r1	; 0x0f
    1230:	ab c0       	rjmp	.+342    	; 0x1388 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	6f 85       	ldd	r22, Y+15	; 0x0f
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1246:	18 8a       	std	Y+16, r1	; 0x10
    1248:	22 c0       	rjmp	.+68     	; 0x128e <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    124a:	88 89       	ldd	r24, Y+16	; 0x10
    124c:	98 2f       	mov	r25, r24
    124e:	9c 5f       	subi	r25, 0xFC	; 252
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	69 2f       	mov	r22, r25
    1254:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1258:	88 23       	and	r24, r24
    125a:	b1 f4       	brne	.+44     	; 0x1288 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    125c:	8f 85       	ldd	r24, Y+15	; 0x0f
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	98 2f       	mov	r25, r24
    126c:	88 89       	ldd	r24, Y+16	; 0x10
    126e:	89 0f       	add	r24, r25
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	0e 94 c9 09 	call	0x1392	; 0x1392 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1276:	60 96       	adiw	r28, 0x10	; 16
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1288:	88 89       	ldd	r24, Y+16	; 0x10
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	88 8b       	std	Y+16, r24	; 0x10
    128e:	88 89       	ldd	r24, Y+16	; 0x10
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	d8 f2       	brcs	.-74     	; 0x124a <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	6f 85       	ldd	r22, Y+15	; 0x0f
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a0 ea       	ldi	r26, 0xA0	; 160
    12a4:	b0 e4       	ldi	r27, 0x40	; 64
    12a6:	8b 87       	std	Y+11, r24	; 0x0b
    12a8:	9c 87       	std	Y+12, r25	; 0x0c
    12aa:	ad 87       	std	Y+13, r26	; 0x0d
    12ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	4a ef       	ldi	r20, 0xFA	; 250
    12bc:	54 e4       	ldi	r21, 0x44	; 68
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8f 83       	std	Y+7, r24	; 0x07
    12c8:	98 87       	std	Y+8, r25	; 0x08
    12ca:	a9 87       	std	Y+9, r26	; 0x09
    12cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ce:	6f 81       	ldd	r22, Y+7	; 0x07
    12d0:	78 85       	ldd	r23, Y+8	; 0x08
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e8       	ldi	r20, 0x80	; 128
    12dc:	5f e3       	ldi	r21, 0x3F	; 63
    12de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    12f0:	6f 81       	ldd	r22, Y+7	; 0x07
    12f2:	78 85       	ldd	r23, Y+8	; 0x08
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	4f e7       	ldi	r20, 0x7F	; 127
    12fe:	57 e4       	ldi	r21, 0x47	; 71
    1300:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	6b 85       	ldd	r22, Y+11	; 0x0b
    130a:	7c 85       	ldd	r23, Y+12	; 0x0c
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e2       	ldi	r20, 0x20	; 32
    1316:	51 e4       	ldi	r21, 0x41	; 65
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e 83       	std	Y+6, r25	; 0x06
    132e:	8d 83       	std	Y+5, r24	; 0x05
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <KEYPAD_getPressedKey+0x186>
    1332:	88 ec       	ldi	r24, 0xC8	; 200
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <KEYPAD_getPressedKey+0x174>
    1342:	9c 83       	std	Y+4, r25	; 0x04
    1344:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	69 f7       	brne	.-38     	; 0x1332 <KEYPAD_getPressedKey+0x168>
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	6f 81       	ldd	r22, Y+7	; 0x07
    135c:	78 85       	ldd	r23, Y+8	; 0x08
    135e:	89 85       	ldd	r24, Y+9	; 0x09
    1360:	9a 85       	ldd	r25, Y+10	; 0x0a
    1362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	9a 81       	ldd	r25, Y+2	; 0x02
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <KEYPAD_getPressedKey+0x1b0>
    137e:	9a 83       	std	Y+2, r25	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1382:	8f 85       	ldd	r24, Y+15	; 0x0f
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	8f 87       	std	Y+15, r24	; 0x0f
    1388:	8f 85       	ldd	r24, Y+15	; 0x0f
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	08 f4       	brcc	.+2      	; 0x1390 <KEYPAD_getPressedKey+0x1c6>
    138e:	51 cf       	rjmp	.-350    	; 0x1232 <KEYPAD_getPressedKey+0x68>
    1390:	4e cf       	rjmp	.-356    	; 0x122e <KEYPAD_getPressedKey+0x64>

00001392 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <KEYPAD_4x4_adjustKeyNumber+0x8>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    13a0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3c 83       	std	Y+4, r19	; 0x04
    13aa:	2b 83       	std	Y+3, r18	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    13b6:	70 c0       	rjmp	.+224    	; 0x1498 <KEYPAD_4x4_adjustKeyNumber+0x106>
    13b8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ba:	3c 81       	ldd	r19, Y+4	; 0x04
    13bc:	29 30       	cpi	r18, 0x09	; 9
    13be:	31 05       	cpc	r19, r1
    13c0:	5c f5       	brge	.+86     	; 0x1418 <KEYPAD_4x4_adjustKeyNumber+0x86>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	84 30       	cpi	r24, 0x04	; 4
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <KEYPAD_4x4_adjustKeyNumber+0x3c>
    13cc:	59 c0       	rjmp	.+178    	; 0x1480 <KEYPAD_4x4_adjustKeyNumber+0xee>
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	25 30       	cpi	r18, 0x05	; 5
    13d4:	31 05       	cpc	r19, r1
    13d6:	9c f4       	brge	.+38     	; 0x13fe <KEYPAD_4x4_adjustKeyNumber+0x6c>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    13e2:	48 c0       	rjmp	.+144    	; 0x1474 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	23 30       	cpi	r18, 0x03	; 3
    13ea:	31 05       	cpc	r19, r1
    13ec:	0c f0       	brlt	.+2      	; 0x13f0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    13ee:	45 c0       	rjmp	.+138    	; 0x147a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    13fa:	39 c0       	rjmp	.+114    	; 0x146e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    13fc:	67 c0       	rjmp	.+206    	; 0x14cc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	26 30       	cpi	r18, 0x06	; 6
    1404:	31 05       	cpc	r19, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1408:	41 c0       	rjmp	.+130    	; 0x148c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	87 30       	cpi	r24, 0x07	; 7
    1410:	91 05       	cpc	r25, r1
    1412:	0c f0       	brlt	.+2      	; 0x1416 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1414:	3e c0       	rjmp	.+124    	; 0x1492 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1416:	37 c0       	rjmp	.+110    	; 0x1486 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1418:	2b 81       	ldd	r18, Y+3	; 0x03
    141a:	3c 81       	ldd	r19, Y+4	; 0x04
    141c:	2c 30       	cpi	r18, 0x0C	; 12
    141e:	31 05       	cpc	r19, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1422:	46 c0       	rjmp	.+140    	; 0x14b0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	8d 30       	cpi	r24, 0x0D	; 13
    142a:	91 05       	cpc	r25, r1
    142c:	5c f4       	brge	.+22     	; 0x1444 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	2a 30       	cpi	r18, 0x0A	; 10
    1434:	31 05       	cpc	r19, r1
    1436:	b1 f1       	breq	.+108    	; 0x14a4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	8b 30       	cpi	r24, 0x0B	; 11
    143e:	91 05       	cpc	r25, r1
    1440:	a4 f5       	brge	.+104    	; 0x14aa <KEYPAD_4x4_adjustKeyNumber+0x118>
    1442:	2d c0       	rjmp	.+90     	; 0x149e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	2e 30       	cpi	r18, 0x0E	; 14
    144a:	31 05       	cpc	r19, r1
    144c:	b9 f1       	breq	.+110    	; 0x14bc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	8e 30       	cpi	r24, 0x0E	; 14
    1454:	91 05       	cpc	r25, r1
    1456:	7c f1       	brlt	.+94     	; 0x14b6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	2f 30       	cpi	r18, 0x0F	; 15
    145e:	31 05       	cpc	r19, r1
    1460:	79 f1       	breq	.+94     	; 0x14c0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	80 31       	cpi	r24, 0x10	; 16
    1468:	91 05       	cpc	r25, r1
    146a:	69 f1       	breq	.+90     	; 0x14c6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    146c:	2f c0       	rjmp	.+94     	; 0x14cc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    146e:	87 e0       	ldi	r24, 0x07	; 7
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	2e c0       	rjmp	.+92     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1474:	88 e0       	ldi	r24, 0x08	; 8
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	2b c0       	rjmp	.+86     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    147a:	89 e0       	ldi	r24, 0x09	; 9
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	28 c0       	rjmp	.+80     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1480:	85 e2       	ldi	r24, 0x25	; 37
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	25 c0       	rjmp	.+74     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1486:	84 e0       	ldi	r24, 0x04	; 4
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	22 c0       	rjmp	.+68     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    148c:	85 e0       	ldi	r24, 0x05	; 5
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	1f c0       	rjmp	.+62     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1492:	86 e0       	ldi	r24, 0x06	; 6
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	1c c0       	rjmp	.+56     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1498:	8a e2       	ldi	r24, 0x2A	; 42
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	19 c0       	rjmp	.+50     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	16 c0       	rjmp	.+44     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    14a4:	82 e0       	ldi	r24, 0x02	; 2
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	13 c0       	rjmp	.+38     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	10 c0       	rjmp	.+32     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14b0:	8d e2       	ldi	r24, 0x2D	; 45
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    14b6:	8d e0       	ldi	r24, 0x0D	; 13
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	0a c0       	rjmp	.+20     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    14bc:	19 82       	std	Y+1, r1	; 0x01
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14c0:	8d e3       	ldi	r24, 0x3D	; 61
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14c6:	8b e2       	ldi	r24, 0x2B	; 43
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2e 97       	sbiw	r28, 0x0e	; 14
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    14f4:	83 e0       	ldi	r24, 0x03	; 3
    14f6:	64 e0       	ldi	r22, 0x04	; 4
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	65 e0       	ldi	r22, 0x05	; 5
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 ea       	ldi	r26, 0xA0	; 160
    150e:	b1 e4       	ldi	r27, 0x41	; 65
    1510:	8b 87       	std	Y+11, r24	; 0x0b
    1512:	9c 87       	std	Y+12, r25	; 0x0c
    1514:	ad 87       	std	Y+13, r26	; 0x0d
    1516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	6b 85       	ldd	r22, Y+11	; 0x0b
    151a:	7c 85       	ldd	r23, Y+12	; 0x0c
    151c:	8d 85       	ldd	r24, Y+13	; 0x0d
    151e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a ef       	ldi	r20, 0xFA	; 250
    1526:	54 e4       	ldi	r21, 0x44	; 68
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8f 83       	std	Y+7, r24	; 0x07
    1532:	98 87       	std	Y+8, r25	; 0x08
    1534:	a9 87       	std	Y+9, r26	; 0x09
    1536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <LCD_init+0x7a>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1572:	6b 85       	ldd	r22, Y+11	; 0x0b
    1574:	7c 85       	ldd	r23, Y+12	; 0x0c
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <LCD_init+0xda>
    159c:	88 ec       	ldi	r24, 0xC8	; 200
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <LCD_init+0xc8>
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <LCD_init+0xbc>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6f 81       	ldd	r22, Y+7	; 0x07
    15c6:	78 85       	ldd	r23, Y+8	; 0x08
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <LCD_init+0x104>
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    15ec:	82 e0       	ldi	r24, 0x02	; 2
    15ee:	6f ef       	ldi	r22, 0xFF	; 255
    15f0:	0e 94 15 08 	call	0x102a	; 0x102a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    15f4:	88 e3       	ldi	r24, 0x38	; 56
    15f6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    15fa:	8c e0       	ldi	r24, 0x0C	; 12
    15fc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	0e 94 0c 0b 	call	0x1618	; 0x1618 <LCD_sendCommand>
}
    1606:	2e 96       	adiw	r28, 0x0e	; 14
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	e9 97       	sbiw	r28, 0x39	; 57
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	64 e0       	ldi	r22, 0x04	; 4
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	a0 e8       	ldi	r26, 0x80	; 128
    163e:	bf e3       	ldi	r27, 0x3F	; 63
    1640:	8d ab       	std	Y+53, r24	; 0x35
    1642:	9e ab       	std	Y+54, r25	; 0x36
    1644:	af ab       	std	Y+55, r26	; 0x37
    1646:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1648:	6d a9       	ldd	r22, Y+53	; 0x35
    164a:	7e a9       	ldd	r23, Y+54	; 0x36
    164c:	8f a9       	ldd	r24, Y+55	; 0x37
    164e:	98 ad       	ldd	r25, Y+56	; 0x38
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a ef       	ldi	r20, 0xFA	; 250
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	89 ab       	std	Y+49, r24	; 0x31
    1662:	9a ab       	std	Y+50, r25	; 0x32
    1664:	ab ab       	std	Y+51, r26	; 0x33
    1666:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1668:	69 a9       	ldd	r22, Y+49	; 0x31
    166a:	7a a9       	ldd	r23, Y+50	; 0x32
    166c:	8b a9       	ldd	r24, Y+51	; 0x33
    166e:	9c a9       	ldd	r25, Y+52	; 0x34
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e8       	ldi	r20, 0x80	; 128
    1676:	5f e3       	ldi	r21, 0x3F	; 63
    1678:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167c:	88 23       	and	r24, r24
    167e:	2c f4       	brge	.+10     	; 0x168a <LCD_sendCommand+0x72>
		__ticks = 1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	98 ab       	std	Y+48, r25	; 0x30
    1686:	8f a7       	std	Y+47, r24	; 0x2f
    1688:	3f c0       	rjmp	.+126    	; 0x1708 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    168a:	69 a9       	ldd	r22, Y+49	; 0x31
    168c:	7a a9       	ldd	r23, Y+50	; 0x32
    168e:	8b a9       	ldd	r24, Y+51	; 0x33
    1690:	9c a9       	ldd	r25, Y+52	; 0x34
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	57 e4       	ldi	r21, 0x47	; 71
    169a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169e:	18 16       	cp	r1, r24
    16a0:	4c f5       	brge	.+82     	; 0x16f4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a2:	6d a9       	ldd	r22, Y+53	; 0x35
    16a4:	7e a9       	ldd	r23, Y+54	; 0x36
    16a6:	8f a9       	ldd	r24, Y+55	; 0x37
    16a8:	98 ad       	ldd	r25, Y+56	; 0x38
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e2       	ldi	r20, 0x20	; 32
    16b0:	51 e4       	ldi	r21, 0x41	; 65
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	98 ab       	std	Y+48, r25	; 0x30
    16c8:	8f a7       	std	Y+47, r24	; 0x2f
    16ca:	0f c0       	rjmp	.+30     	; 0x16ea <LCD_sendCommand+0xd2>
    16cc:	88 ec       	ldi	r24, 0xC8	; 200
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e a7       	std	Y+46, r25	; 0x2e
    16d2:	8d a7       	std	Y+45, r24	; 0x2d
    16d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    16d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_sendCommand+0xc0>
    16dc:	9e a7       	std	Y+46, r25	; 0x2e
    16de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16e2:	98 a9       	ldd	r25, Y+48	; 0x30
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	98 ab       	std	Y+48, r25	; 0x30
    16e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ec:	98 a9       	ldd	r25, Y+48	; 0x30
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	69 f7       	brne	.-38     	; 0x16cc <LCD_sendCommand+0xb4>
    16f2:	14 c0       	rjmp	.+40     	; 0x171c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	69 a9       	ldd	r22, Y+49	; 0x31
    16f6:	7a a9       	ldd	r23, Y+50	; 0x32
    16f8:	8b a9       	ldd	r24, Y+51	; 0x33
    16fa:	9c a9       	ldd	r25, Y+52	; 0x34
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	98 ab       	std	Y+48, r25	; 0x30
    1706:	8f a7       	std	Y+47, r24	; 0x2f
    1708:	8f a5       	ldd	r24, Y+47	; 0x2f
    170a:	98 a9       	ldd	r25, Y+48	; 0x30
    170c:	9c a7       	std	Y+44, r25	; 0x2c
    170e:	8b a7       	std	Y+43, r24	; 0x2b
    1710:	8b a5       	ldd	r24, Y+43	; 0x2b
    1712:	9c a5       	ldd	r25, Y+44	; 0x2c
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <LCD_sendCommand+0xfc>
    1718:	9c a7       	std	Y+44, r25	; 0x2c
    171a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	65 e0       	ldi	r22, 0x05	; 5
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e8       	ldi	r26, 0x80	; 128
    172c:	bf e3       	ldi	r27, 0x3F	; 63
    172e:	8f a3       	std	Y+39, r24	; 0x27
    1730:	98 a7       	std	Y+40, r25	; 0x28
    1732:	a9 a7       	std	Y+41, r26	; 0x29
    1734:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1736:	6f a1       	ldd	r22, Y+39	; 0x27
    1738:	78 a5       	ldd	r23, Y+40	; 0x28
    173a:	89 a5       	ldd	r24, Y+41	; 0x29
    173c:	9a a5       	ldd	r25, Y+42	; 0x2a
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a ef       	ldi	r20, 0xFA	; 250
    1744:	54 e4       	ldi	r21, 0x44	; 68
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	8b a3       	std	Y+35, r24	; 0x23
    1750:	9c a3       	std	Y+36, r25	; 0x24
    1752:	ad a3       	std	Y+37, r26	; 0x25
    1754:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1756:	6b a1       	ldd	r22, Y+35	; 0x23
    1758:	7c a1       	ldd	r23, Y+36	; 0x24
    175a:	8d a1       	ldd	r24, Y+37	; 0x25
    175c:	9e a1       	ldd	r25, Y+38	; 0x26
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	5f e3       	ldi	r21, 0x3F	; 63
    1766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176a:	88 23       	and	r24, r24
    176c:	2c f4       	brge	.+10     	; 0x1778 <LCD_sendCommand+0x160>
		__ticks = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9a a3       	std	Y+34, r25	; 0x22
    1774:	89 a3       	std	Y+33, r24	; 0x21
    1776:	3f c0       	rjmp	.+126    	; 0x17f6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1778:	6b a1       	ldd	r22, Y+35	; 0x23
    177a:	7c a1       	ldd	r23, Y+36	; 0x24
    177c:	8d a1       	ldd	r24, Y+37	; 0x25
    177e:	9e a1       	ldd	r25, Y+38	; 0x26
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	4c f5       	brge	.+82     	; 0x17e2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1790:	6f a1       	ldd	r22, Y+39	; 0x27
    1792:	78 a5       	ldd	r23, Y+40	; 0x28
    1794:	89 a5       	ldd	r24, Y+41	; 0x29
    1796:	9a a5       	ldd	r25, Y+42	; 0x2a
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e2       	ldi	r20, 0x20	; 32
    179e:	51 e4       	ldi	r21, 0x41	; 65
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9a a3       	std	Y+34, r25	; 0x22
    17b6:	89 a3       	std	Y+33, r24	; 0x21
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <LCD_sendCommand+0x1c0>
    17ba:	88 ec       	ldi	r24, 0xC8	; 200
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	98 a3       	std	Y+32, r25	; 0x20
    17c0:	8f 8f       	std	Y+31, r24	; 0x1f
    17c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17c4:	98 a1       	ldd	r25, Y+32	; 0x20
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <LCD_sendCommand+0x1ae>
    17ca:	98 a3       	std	Y+32, r25	; 0x20
    17cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ce:	89 a1       	ldd	r24, Y+33	; 0x21
    17d0:	9a a1       	ldd	r25, Y+34	; 0x22
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	9a a3       	std	Y+34, r25	; 0x22
    17d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	89 a1       	ldd	r24, Y+33	; 0x21
    17da:	9a a1       	ldd	r25, Y+34	; 0x22
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	69 f7       	brne	.-38     	; 0x17ba <LCD_sendCommand+0x1a2>
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e2:	6b a1       	ldd	r22, Y+35	; 0x23
    17e4:	7c a1       	ldd	r23, Y+36	; 0x24
    17e6:	8d a1       	ldd	r24, Y+37	; 0x25
    17e8:	9e a1       	ldd	r25, Y+38	; 0x26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9a a3       	std	Y+34, r25	; 0x22
    17f4:	89 a3       	std	Y+33, r24	; 0x21
    17f6:	89 a1       	ldd	r24, Y+33	; 0x21
    17f8:	9a a1       	ldd	r25, Y+34	; 0x22
    17fa:	9e 8f       	std	Y+30, r25	; 0x1e
    17fc:	8d 8f       	std	Y+29, r24	; 0x1d
    17fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1800:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_sendCommand+0x1ea>
    1806:	9e 8f       	std	Y+30, r25	; 0x1e
    1808:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	69 ad       	ldd	r22, Y+57	; 0x39
    180e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <GPIO_writePort>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e8       	ldi	r26, 0x80	; 128
    1818:	bf e3       	ldi	r27, 0x3F	; 63
    181a:	89 8f       	std	Y+25, r24	; 0x19
    181c:	9a 8f       	std	Y+26, r25	; 0x1a
    181e:	ab 8f       	std	Y+27, r26	; 0x1b
    1820:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1822:	69 8d       	ldd	r22, Y+25	; 0x19
    1824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a ef       	ldi	r20, 0xFA	; 250
    1830:	54 e4       	ldi	r21, 0x44	; 68
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	8d 8b       	std	Y+21, r24	; 0x15
    183c:	9e 8b       	std	Y+22, r25	; 0x16
    183e:	af 8b       	std	Y+23, r26	; 0x17
    1840:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1842:	6d 89       	ldd	r22, Y+21	; 0x15
    1844:	7e 89       	ldd	r23, Y+22	; 0x16
    1846:	8f 89       	ldd	r24, Y+23	; 0x17
    1848:	98 8d       	ldd	r25, Y+24	; 0x18
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1856:	88 23       	and	r24, r24
    1858:	2c f4       	brge	.+10     	; 0x1864 <LCD_sendCommand+0x24c>
		__ticks = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9c 8b       	std	Y+20, r25	; 0x14
    1860:	8b 8b       	std	Y+19, r24	; 0x13
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1864:	6d 89       	ldd	r22, Y+21	; 0x15
    1866:	7e 89       	ldd	r23, Y+22	; 0x16
    1868:	8f 89       	ldd	r24, Y+23	; 0x17
    186a:	98 8d       	ldd	r25, Y+24	; 0x18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	57 e4       	ldi	r21, 0x47	; 71
    1874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1878:	18 16       	cp	r1, r24
    187a:	4c f5       	brge	.+82     	; 0x18ce <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187c:	69 8d       	ldd	r22, Y+25	; 0x19
    187e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9c 8b       	std	Y+20, r25	; 0x14
    18a2:	8b 8b       	std	Y+19, r24	; 0x13
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <LCD_sendCommand+0x2ac>
    18a6:	88 ec       	ldi	r24, 0xC8	; 200
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9a 8b       	std	Y+18, r25	; 0x12
    18ac:	89 8b       	std	Y+17, r24	; 0x11
    18ae:	89 89       	ldd	r24, Y+17	; 0x11
    18b0:	9a 89       	ldd	r25, Y+18	; 0x12
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_sendCommand+0x29a>
    18b6:	9a 8b       	std	Y+18, r25	; 0x12
    18b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ba:	8b 89       	ldd	r24, Y+19	; 0x13
    18bc:	9c 89       	ldd	r25, Y+20	; 0x14
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	9c 8b       	std	Y+20, r25	; 0x14
    18c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c4:	8b 89       	ldd	r24, Y+19	; 0x13
    18c6:	9c 89       	ldd	r25, Y+20	; 0x14
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	69 f7       	brne	.-38     	; 0x18a6 <LCD_sendCommand+0x28e>
    18cc:	14 c0       	rjmp	.+40     	; 0x18f6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ce:	6d 89       	ldd	r22, Y+21	; 0x15
    18d0:	7e 89       	ldd	r23, Y+22	; 0x16
    18d2:	8f 89       	ldd	r24, Y+23	; 0x17
    18d4:	98 8d       	ldd	r25, Y+24	; 0x18
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9c 8b       	std	Y+20, r25	; 0x14
    18e0:	8b 8b       	std	Y+19, r24	; 0x13
    18e2:	8b 89       	ldd	r24, Y+19	; 0x13
    18e4:	9c 89       	ldd	r25, Y+20	; 0x14
    18e6:	98 8b       	std	Y+16, r25	; 0x10
    18e8:	8f 87       	std	Y+15, r24	; 0x0f
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	98 89       	ldd	r25, Y+16	; 0x10
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_sendCommand+0x2d6>
    18f2:	98 8b       	std	Y+16, r25	; 0x10
    18f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    18f6:	83 e0       	ldi	r24, 0x03	; 3
    18f8:	65 e0       	ldi	r22, 0x05	; 5
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e8       	ldi	r26, 0x80	; 128
    1906:	bf e3       	ldi	r27, 0x3F	; 63
    1908:	8b 87       	std	Y+11, r24	; 0x0b
    190a:	9c 87       	std	Y+12, r25	; 0x0c
    190c:	ad 87       	std	Y+13, r26	; 0x0d
    190e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	6b 85       	ldd	r22, Y+11	; 0x0b
    1912:	7c 85       	ldd	r23, Y+12	; 0x0c
    1914:	8d 85       	ldd	r24, Y+13	; 0x0d
    1916:	9e 85       	ldd	r25, Y+14	; 0x0e
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a ef       	ldi	r20, 0xFA	; 250
    191e:	54 e4       	ldi	r21, 0x44	; 68
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8f 83       	std	Y+7, r24	; 0x07
    192a:	98 87       	std	Y+8, r25	; 0x08
    192c:	a9 87       	std	Y+9, r26	; 0x09
    192e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9e 83       	std	Y+6, r25	; 0x06
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1952:	6f 81       	ldd	r22, Y+7	; 0x07
    1954:	78 85       	ldd	r23, Y+8	; 0x08
    1956:	89 85       	ldd	r24, Y+9	; 0x09
    1958:	9a 85       	ldd	r25, Y+10	; 0x0a
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	6b 85       	ldd	r22, Y+11	; 0x0b
    196c:	7c 85       	ldd	r23, Y+12	; 0x0c
    196e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1970:	9e 85       	ldd	r25, Y+14	; 0x0e
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <LCD_sendCommand+0x39a>
    1994:	88 ec       	ldi	r24, 0xC8	; 200
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9c 83       	std	Y+4, r25	; 0x04
    199a:	8b 83       	std	Y+3, r24	; 0x03
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_sendCommand+0x388>
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9e 83       	std	Y+6, r25	; 0x06
    19b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <LCD_sendCommand+0x37c>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	8d 81       	ldd	r24, Y+5	; 0x05
    19d2:	9e 81       	ldd	r25, Y+6	; 0x06
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	9a 81       	ldd	r25, Y+2	; 0x02
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_sendCommand+0x3c4>
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    19e4:	e9 96       	adiw	r28, 0x39	; 57
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	e9 97       	sbiw	r28, 0x39	; 57
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	64 e0       	ldi	r22, 0x04	; 4
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e8       	ldi	r26, 0x80	; 128
    1a1c:	bf e3       	ldi	r27, 0x3F	; 63
    1a1e:	8d ab       	std	Y+53, r24	; 0x35
    1a20:	9e ab       	std	Y+54, r25	; 0x36
    1a22:	af ab       	std	Y+55, r26	; 0x37
    1a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6d a9       	ldd	r22, Y+53	; 0x35
    1a28:	7e a9       	ldd	r23, Y+54	; 0x36
    1a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	89 ab       	std	Y+49, r24	; 0x31
    1a40:	9a ab       	std	Y+50, r25	; 0x32
    1a42:	ab ab       	std	Y+51, r26	; 0x33
    1a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a46:	69 a9       	ldd	r22, Y+49	; 0x31
    1a48:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	98 ab       	std	Y+48, r25	; 0x30
    1a64:	8f a7       	std	Y+47, r24	; 0x2f
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1a68:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6d a9       	ldd	r22, Y+53	; 0x35
    1a82:	7e a9       	ldd	r23, Y+54	; 0x36
    1a84:	8f a9       	ldd	r24, Y+55	; 0x37
    1a86:	98 ad       	ldd	r25, Y+56	; 0x38
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_displayCharacter+0xd2>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e a7       	std	Y+46, r25	; 0x2e
    1ab0:	8d a7       	std	Y+45, r24	; 0x2d
    1ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_displayCharacter+0xc0>
    1aba:	9e a7       	std	Y+46, r25	; 0x2e
    1abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aca:	98 a9       	ldd	r25, Y+48	; 0x30
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_displayCharacter+0xb4>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aea:	9c a7       	std	Y+44, r25	; 0x2c
    1aec:	8b a7       	std	Y+43, r24	; 0x2b
    1aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_displayCharacter+0xfc>
    1af6:	9c a7       	std	Y+44, r25	; 0x2c
    1af8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	65 e0       	ldi	r22, 0x05	; 5
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a0 e8       	ldi	r26, 0x80	; 128
    1b0a:	bf e3       	ldi	r27, 0x3F	; 63
    1b0c:	8f a3       	std	Y+39, r24	; 0x27
    1b0e:	98 a7       	std	Y+40, r25	; 0x28
    1b10:	a9 a7       	std	Y+41, r26	; 0x29
    1b12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	6f a1       	ldd	r22, Y+39	; 0x27
    1b16:	78 a5       	ldd	r23, Y+40	; 0x28
    1b18:	89 a5       	ldd	r24, Y+41	; 0x29
    1b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a ef       	ldi	r20, 0xFA	; 250
    1b22:	54 e4       	ldi	r21, 0x44	; 68
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8b a3       	std	Y+35, r24	; 0x23
    1b2e:	9c a3       	std	Y+36, r25	; 0x24
    1b30:	ad a3       	std	Y+37, r26	; 0x25
    1b32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b34:	6b a1       	ldd	r22, Y+35	; 0x23
    1b36:	7c a1       	ldd	r23, Y+36	; 0x24
    1b38:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9a a3       	std	Y+34, r25	; 0x22
    1b52:	89 a3       	std	Y+33, r24	; 0x21
    1b54:	3f c0       	rjmp	.+126    	; 0x1bd4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1b56:	6b a1       	ldd	r22, Y+35	; 0x23
    1b58:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	57 e4       	ldi	r21, 0x47	; 71
    1b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	4c f5       	brge	.+82     	; 0x1bc0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b70:	78 a5       	ldd	r23, Y+40	; 0x28
    1b72:	89 a5       	ldd	r24, Y+41	; 0x29
    1b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9a a3       	std	Y+34, r25	; 0x22
    1b94:	89 a3       	std	Y+33, r24	; 0x21
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <LCD_displayCharacter+0x1c0>
    1b98:	88 ec       	ldi	r24, 0xC8	; 200
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	98 a3       	std	Y+32, r25	; 0x20
    1b9e:	8f 8f       	std	Y+31, r24	; 0x1f
    1ba0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ba2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_displayCharacter+0x1ae>
    1ba8:	98 a3       	std	Y+32, r25	; 0x20
    1baa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	89 a1       	ldd	r24, Y+33	; 0x21
    1bae:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	9a a3       	std	Y+34, r25	; 0x22
    1bb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <LCD_displayCharacter+0x1a2>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bda:	8d 8f       	std	Y+29, r24	; 0x1d
    1bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_displayCharacter+0x1ea>
    1be4:	9e 8f       	std	Y+30, r25	; 0x1e
    1be6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	69 ad       	ldd	r22, Y+57	; 0x39
    1bec:	0e 94 59 08 	call	0x10b2	; 0x10b2 <GPIO_writePort>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a0 e8       	ldi	r26, 0x80	; 128
    1bf6:	bf e3       	ldi	r27, 0x3F	; 63
    1bf8:	89 8f       	std	Y+25, r24	; 0x19
    1bfa:	9a 8f       	std	Y+26, r25	; 0x1a
    1bfc:	ab 8f       	std	Y+27, r26	; 0x1b
    1bfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c00:	69 8d       	ldd	r22, Y+25	; 0x19
    1c02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	4a ef       	ldi	r20, 0xFA	; 250
    1c0e:	54 e4       	ldi	r21, 0x44	; 68
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8d 8b       	std	Y+21, r24	; 0x15
    1c1a:	9e 8b       	std	Y+22, r25	; 0x16
    1c1c:	af 8b       	std	Y+23, r26	; 0x17
    1c1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c20:	6d 89       	ldd	r22, Y+21	; 0x15
    1c22:	7e 89       	ldd	r23, Y+22	; 0x16
    1c24:	8f 89       	ldd	r24, Y+23	; 0x17
    1c26:	98 8d       	ldd	r25, Y+24	; 0x18
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e8       	ldi	r20, 0x80	; 128
    1c2e:	5f e3       	ldi	r21, 0x3F	; 63
    1c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c34:	88 23       	and	r24, r24
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 8b       	std	Y+20, r25	; 0x14
    1c3e:	8b 8b       	std	Y+19, r24	; 0x13
    1c40:	3f c0       	rjmp	.+126    	; 0x1cc0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1c42:	6d 89       	ldd	r22, Y+21	; 0x15
    1c44:	7e 89       	ldd	r23, Y+22	; 0x16
    1c46:	8f 89       	ldd	r24, Y+23	; 0x17
    1c48:	98 8d       	ldd	r25, Y+24	; 0x18
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	57 e4       	ldi	r21, 0x47	; 71
    1c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c56:	18 16       	cp	r1, r24
    1c58:	4c f5       	brge	.+82     	; 0x1cac <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e2       	ldi	r20, 0x20	; 32
    1c68:	51 e4       	ldi	r21, 0x41	; 65
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	9c 8b       	std	Y+20, r25	; 0x14
    1c80:	8b 8b       	std	Y+19, r24	; 0x13
    1c82:	0f c0       	rjmp	.+30     	; 0x1ca2 <LCD_displayCharacter+0x2ac>
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	9a 8b       	std	Y+18, r25	; 0x12
    1c8a:	89 8b       	std	Y+17, r24	; 0x11
    1c8c:	89 89       	ldd	r24, Y+17	; 0x11
    1c8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <LCD_displayCharacter+0x29a>
    1c94:	9a 8b       	std	Y+18, r25	; 0x12
    1c96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c98:	8b 89       	ldd	r24, Y+19	; 0x13
    1c9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	69 f7       	brne	.-38     	; 0x1c84 <LCD_displayCharacter+0x28e>
    1caa:	14 c0       	rjmp	.+40     	; 0x1cd4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	6d 89       	ldd	r22, Y+21	; 0x15
    1cae:	7e 89       	ldd	r23, Y+22	; 0x16
    1cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	98 8b       	std	Y+16, r25	; 0x10
    1cc6:	8f 87       	std	Y+15, r24	; 0x0f
    1cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cca:	98 89       	ldd	r25, Y+16	; 0x10
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_displayCharacter+0x2d6>
    1cd0:	98 8b       	std	Y+16, r25	; 0x10
    1cd2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	65 e0       	ldi	r22, 0x05	; 5
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e8       	ldi	r26, 0x80	; 128
    1ce4:	bf e3       	ldi	r27, 0x3F	; 63
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_displayCharacter+0x39a>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_displayCharacter+0x388>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <LCD_displayCharacter+0x37c>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_displayCharacter+0x3c4>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1dc2:	e9 96       	adiw	r28, 0x39	; 57
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <LCD_displayString+0x6>
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	9b 83       	std	Y+3, r25	; 0x03
    1de2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	80 81       	ld	r24, Z
    1dfa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_displayCharacter>
		i++;
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	80 81       	ld	r24, Z
    1e16:	88 23       	and	r24, r24
    1e18:	39 f7       	brne	.-50     	; 0x1de8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <LCD_moveCursor+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <LCD_moveCursor+0x8>
    1e2e:	0f 92       	push	r0
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	8a 83       	std	Y+2, r24	; 0x02
    1e36:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	3d 83       	std	Y+5, r19	; 0x05
    1e40:	2c 83       	std	Y+4, r18	; 0x04
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	c1 f0       	breq	.+48     	; 0x1e7c <LCD_moveCursor+0x56>
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <LCD_moveCursor+0x3a>
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	61 f0       	breq	.+24     	; 0x1e76 <LCD_moveCursor+0x50>
    1e5e:	19 c0       	rjmp	.+50     	; 0x1e92 <LCD_moveCursor+0x6c>
    1e60:	2c 81       	ldd	r18, Y+4	; 0x04
    1e62:	3d 81       	ldd	r19, Y+5	; 0x05
    1e64:	22 30       	cpi	r18, 0x02	; 2
    1e66:	31 05       	cpc	r19, r1
    1e68:	69 f0       	breq	.+26     	; 0x1e84 <LCD_moveCursor+0x5e>
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6e:	83 30       	cpi	r24, 0x03	; 3
    1e70:	91 05       	cpc	r25, r1
    1e72:	61 f0       	breq	.+24     	; 0x1e8c <LCD_moveCursor+0x66>
    1e74:	0e c0       	rjmp	.+28     	; 0x1e92 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	89 83       	std	Y+1, r24	; 0x01
    1e7a:	0b c0       	rjmp	.+22     	; 0x1e92 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	80 5c       	subi	r24, 0xC0	; 192
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	07 c0       	rjmp	.+14     	; 0x1e92 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	80 5f       	subi	r24, 0xF0	; 240
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	80 5b       	subi	r24, 0xB0	; 176
    1e90:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	80 68       	ori	r24, 0x80	; 128
    1e96:	0e 94 0c 0b 	call	0x1618	; 0x1618 <LCD_sendCommand>
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <LCD_displayStringRowColumn+0x6>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <LCD_displayStringRowColumn+0x8>
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	6a 83       	std	Y+2, r22	; 0x02
    1eba:	5c 83       	std	Y+4, r21	; 0x04
    1ebc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ec2:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
}
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	62 97       	sbiw	r28, 0x12	; 18
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1ef4:	89 89       	ldd	r24, Y+17	; 0x11
    1ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef8:	9e 01       	movw	r18, r28
    1efa:	2f 5f       	subi	r18, 0xFF	; 255
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	b9 01       	movw	r22, r18
    1f00:	4a e0       	ldi	r20, 0x0A	; 10
    1f02:	50 e0       	ldi	r21, 0x00	; 0
    1f04:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f08:	ce 01       	movw	r24, r28
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
}
    1f10:	62 96       	adiw	r28, 0x12	; 18
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <LCD_sendCommand>
}
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <tick>:
Timer1_ConfigType timer_config;


void MainOptions (void);

void tick(void){
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1f3e:	80 91 fd 00 	lds	r24, 0x00FD
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	80 93 fd 00 	sts	0x00FD, r24
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <CreatePwd>:



void CreatePwd(void){
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	cb 59       	subi	r28, 0x9B	; 155
    1f5c:	d0 40       	sbci	r29, 0x00	; 0
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61

	uint8 i;

	LCD_displayString("Enter New Pass");
    1f68:	80 e6       	ldi	r24, 0x60	; 96
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e9 56       	subi	r30, 0x69	; 105
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	aa e7       	ldi	r26, 0x7A	; 122
    1f84:	b3 e4       	ldi	r27, 0x43	; 67
    1f86:	80 83       	st	Z, r24
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	a2 83       	std	Z+2, r26	; 0x02
    1f8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	8e 01       	movw	r16, r28
    1f90:	0d 56       	subi	r16, 0x6D	; 109
    1f92:	1f 4f       	sbci	r17, 0xFF	; 255
    1f94:	fe 01       	movw	r30, r28
    1f96:	e9 56       	subi	r30, 0x69	; 105
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	82 81       	ldd	r24, Z+2	; 0x02
    1fa0:	93 81       	ldd	r25, Z+3	; 0x03
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a ef       	ldi	r20, 0xFA	; 250
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	80 83       	st	Z, r24
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	a2 83       	std	Z+2, r26	; 0x02
    1fba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ed 56       	subi	r30, 0x6D	; 109
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	60 81       	ld	r22, Z
    1fc4:	71 81       	ldd	r23, Z+1	; 0x01
    1fc6:	82 81       	ldd	r24, Z+2	; 0x02
    1fc8:	93 81       	ldd	r25, Z+3	; 0x03
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e8       	ldi	r20, 0x80	; 128
    1fd0:	5f e3       	ldi	r21, 0x3F	; 63
    1fd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fd6:	88 23       	and	r24, r24
    1fd8:	44 f4       	brge	.+16     	; 0x1fea <CreatePwd+0x9c>
		__ticks = 1;
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ef 56       	subi	r30, 0x6F	; 111
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	80 83       	st	Z, r24
    1fe8:	64 c0       	rjmp	.+200    	; 0x20b2 <CreatePwd+0x164>
	else if (__tmp > 65535)
    1fea:	fe 01       	movw	r30, r28
    1fec:	ed 56       	subi	r30, 0x6D	; 109
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	0c f0       	brlt	.+2      	; 0x200a <CreatePwd+0xbc>
    2008:	43 c0       	rjmp	.+134    	; 0x2090 <CreatePwd+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    200a:	fe 01       	movw	r30, r28
    200c:	e9 56       	subi	r30, 0x69	; 105
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	8e 01       	movw	r16, r28
    202a:	0f 56       	subi	r16, 0x6F	; 111
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	f8 01       	movw	r30, r16
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
    2040:	1f c0       	rjmp	.+62     	; 0x2080 <CreatePwd+0x132>
    2042:	fe 01       	movw	r30, r28
    2044:	e1 57       	subi	r30, 0x71	; 113
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	88 ec       	ldi	r24, 0xC8	; 200
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
    2050:	fe 01       	movw	r30, r28
    2052:	e1 57       	subi	r30, 0x71	; 113
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <CreatePwd+0x10c>
    205e:	fe 01       	movw	r30, r28
    2060:	e1 57       	subi	r30, 0x71	; 113
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	de 01       	movw	r26, r28
    206a:	af 56       	subi	r26, 0x6F	; 111
    206c:	bf 4f       	sbci	r27, 0xFF	; 255
    206e:	fe 01       	movw	r30, r28
    2070:	ef 56       	subi	r30, 0x6F	; 111
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	9c 93       	st	X, r25
    207e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2080:	fe 01       	movw	r30, r28
    2082:	ef 56       	subi	r30, 0x6F	; 111
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	80 81       	ld	r24, Z
    2088:	91 81       	ldd	r25, Z+1	; 0x01
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	d1 f6       	brne	.-76     	; 0x2042 <CreatePwd+0xf4>
    208e:	28 c0       	rjmp	.+80     	; 0x20e0 <CreatePwd+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	8e 01       	movw	r16, r28
    2092:	0f 56       	subi	r16, 0x6F	; 111
    2094:	1f 4f       	sbci	r17, 0xFF	; 255
    2096:	fe 01       	movw	r30, r28
    2098:	ed 56       	subi	r30, 0x6D	; 109
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	f8 01       	movw	r30, r16
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	de 01       	movw	r26, r28
    20b4:	a3 57       	subi	r26, 0x73	; 115
    20b6:	bf 4f       	sbci	r27, 0xFF	; 255
    20b8:	fe 01       	movw	r30, r28
    20ba:	ef 56       	subi	r30, 0x6F	; 111
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	91 81       	ldd	r25, Z+1	; 0x01
    20c2:	11 96       	adiw	r26, 0x01	; 1
    20c4:	9c 93       	st	X, r25
    20c6:	8e 93       	st	-X, r24
    20c8:	fe 01       	movw	r30, r28
    20ca:	e3 57       	subi	r30, 0x73	; 115
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 81       	ld	r24, Z
    20d0:	91 81       	ldd	r25, Z+1	; 0x01
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <CreatePwd+0x184>
    20d6:	fe 01       	movw	r30, r28
    20d8:	e3 57       	subi	r30, 0x73	; 115
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
	_delay_ms(250);
	for (i=0; i<5; i++){
    20e0:	fe 01       	movw	r30, r28
    20e2:	e5 56       	subi	r30, 0x65	; 101
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	10 82       	st	Z, r1
    20e8:	7f c1       	rjmp	.+766    	; 0x23e8 <CreatePwd+0x49a>
		pwd1[i]=KEYPAD_getPressedKey()+48;
    20ea:	fe 01       	movw	r30, r28
    20ec:	e5 56       	subi	r30, 0x65	; 101
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	08 2f       	mov	r16, r24
    20f4:	10 e0       	ldi	r17, 0x00	; 0
    20f6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    20fa:	80 5d       	subi	r24, 0xD0	; 208
    20fc:	f8 01       	movw	r30, r16
    20fe:	e0 50       	subi	r30, 0x00	; 0
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 83       	st	Z, r24
    2104:	fe 01       	movw	r30, r28
    2106:	e7 57       	subi	r30, 0x77	; 119
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	aa e7       	ldi	r26, 0x7A	; 122
    2110:	b3 e4       	ldi	r27, 0x43	; 67
    2112:	80 83       	st	Z, r24
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	a2 83       	std	Z+2, r26	; 0x02
    2118:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	8e 01       	movw	r16, r28
    211c:	0b 57       	subi	r16, 0x7B	; 123
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	fe 01       	movw	r30, r28
    2122:	e7 57       	subi	r30, 0x77	; 119
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a ef       	ldi	r20, 0xFA	; 250
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	f8 01       	movw	r30, r16
    2140:	80 83       	st	Z, r24
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	a2 83       	std	Z+2, r26	; 0x02
    2146:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2148:	fe 01       	movw	r30, r28
    214a:	eb 57       	subi	r30, 0x7B	; 123
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e8       	ldi	r20, 0x80	; 128
    215c:	5f e3       	ldi	r21, 0x3F	; 63
    215e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2162:	88 23       	and	r24, r24
    2164:	44 f4       	brge	.+16     	; 0x2176 <CreatePwd+0x228>
		__ticks = 1;
    2166:	fe 01       	movw	r30, r28
    2168:	ed 57       	subi	r30, 0x7D	; 125
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	80 83       	st	Z, r24
    2174:	64 c0       	rjmp	.+200    	; 0x223e <CreatePwd+0x2f0>
	else if (__tmp > 65535)
    2176:	fe 01       	movw	r30, r28
    2178:	eb 57       	subi	r30, 0x7B	; 123
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	0c f0       	brlt	.+2      	; 0x2196 <CreatePwd+0x248>
    2194:	43 c0       	rjmp	.+134    	; 0x221c <CreatePwd+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	fe 01       	movw	r30, r28
    2198:	e7 57       	subi	r30, 0x77	; 119
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8e 01       	movw	r16, r28
    21b6:	0d 57       	subi	r16, 0x7D	; 125
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	f8 01       	movw	r30, r16
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	80 83       	st	Z, r24
    21cc:	1f c0       	rjmp	.+62     	; 0x220c <CreatePwd+0x2be>
    21ce:	fe 01       	movw	r30, r28
    21d0:	ef 57       	subi	r30, 0x7F	; 127
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	88 ec       	ldi	r24, 0xC8	; 200
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
    21dc:	fe 01       	movw	r30, r28
    21de:	ef 57       	subi	r30, 0x7F	; 127
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <CreatePwd+0x298>
    21ea:	fe 01       	movw	r30, r28
    21ec:	ef 57       	subi	r30, 0x7F	; 127
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	de 01       	movw	r26, r28
    21f6:	ad 57       	subi	r26, 0x7D	; 125
    21f8:	bf 4f       	sbci	r27, 0xFF	; 255
    21fa:	fe 01       	movw	r30, r28
    21fc:	ed 57       	subi	r30, 0x7D	; 125
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	9c 93       	st	X, r25
    220a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	fe 01       	movw	r30, r28
    220e:	ed 57       	subi	r30, 0x7D	; 125
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	d1 f6       	brne	.-76     	; 0x21ce <CreatePwd+0x280>
    221a:	27 c0       	rjmp	.+78     	; 0x226a <CreatePwd+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	8e 01       	movw	r16, r28
    221e:	0d 57       	subi	r16, 0x7D	; 125
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	fe 01       	movw	r30, r28
    2224:	eb 57       	subi	r30, 0x7B	; 123
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	60 81       	ld	r22, Z
    222a:	71 81       	ldd	r23, Z+1	; 0x01
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	93 81       	ldd	r25, Z+3	; 0x03
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	f8 01       	movw	r30, r16
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
    223e:	de 01       	movw	r26, r28
    2240:	a1 58       	subi	r26, 0x81	; 129
    2242:	bf 4f       	sbci	r27, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	ed 57       	subi	r30, 0x7D	; 125
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	8d 93       	st	X+, r24
    2250:	9c 93       	st	X, r25
    2252:	fe 01       	movw	r30, r28
    2254:	e1 58       	subi	r30, 0x81	; 129
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <CreatePwd+0x30e>
    2260:	fe 01       	movw	r30, r28
    2262:	e1 58       	subi	r30, 0x81	; 129
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
		_delay_ms(250);
		LCD_displayCharacter('*');
    226a:	8a e2       	ldi	r24, 0x2A	; 42
    226c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_displayCharacter>
    2270:	fe 01       	movw	r30, r28
    2272:	e5 58       	subi	r30, 0x85	; 133
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	aa e7       	ldi	r26, 0x7A	; 122
    227c:	b3 e4       	ldi	r27, 0x43	; 67
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	8e 01       	movw	r16, r28
    2288:	09 58       	subi	r16, 0x89	; 137
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e5 58       	subi	r30, 0x85	; 133
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e9 58       	subi	r30, 0x89	; 137
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	44 f4       	brge	.+16     	; 0x22e2 <CreatePwd+0x394>
		__ticks = 1;
    22d2:	fe 01       	movw	r30, r28
    22d4:	eb 58       	subi	r30, 0x8B	; 139
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	64 c0       	rjmp	.+200    	; 0x23aa <CreatePwd+0x45c>
	else if (__tmp > 65535)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e9 58       	subi	r30, 0x89	; 137
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <CreatePwd+0x3b4>
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <CreatePwd+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	fe 01       	movw	r30, r28
    2304:	e5 58       	subi	r30, 0x85	; 133
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8e 01       	movw	r16, r28
    2322:	0b 58       	subi	r16, 0x8B	; 139
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	1f c0       	rjmp	.+62     	; 0x2378 <CreatePwd+0x42a>
    233a:	fe 01       	movw	r30, r28
    233c:	ed 58       	subi	r30, 0x8D	; 141
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	fe 01       	movw	r30, r28
    234a:	ed 58       	subi	r30, 0x8D	; 141
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <CreatePwd+0x404>
    2356:	fe 01       	movw	r30, r28
    2358:	ed 58       	subi	r30, 0x8D	; 141
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	de 01       	movw	r26, r28
    2362:	ab 58       	subi	r26, 0x8B	; 139
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	eb 58       	subi	r30, 0x8B	; 139
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 93       	st	X, r25
    2376:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	fe 01       	movw	r30, r28
    237a:	eb 58       	subi	r30, 0x8B	; 139
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	d1 f6       	brne	.-76     	; 0x233a <CreatePwd+0x3ec>
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <CreatePwd+0x488>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	8e 01       	movw	r16, r28
    238a:	0b 58       	subi	r16, 0x8B	; 139
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	e9 58       	subi	r30, 0x89	; 137
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	de 01       	movw	r26, r28
    23ac:	af 58       	subi	r26, 0x8F	; 143
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	eb 58       	subi	r30, 0x8B	; 139
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	8d 93       	st	X+, r24
    23bc:	9c 93       	st	X, r25
    23be:	fe 01       	movw	r30, r28
    23c0:	ef 58       	subi	r30, 0x8F	; 143
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <CreatePwd+0x47a>
    23cc:	fe 01       	movw	r30, r28
    23ce:	ef 58       	subi	r30, 0x8F	; 143
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
	uint8 i;

	LCD_displayString("Enter New Pass");
	LCD_moveCursor(1, 0);
	_delay_ms(250);
	for (i=0; i<5; i++){
    23d6:	de 01       	movw	r26, r28
    23d8:	a5 56       	subi	r26, 0x65	; 101
    23da:	bf 4f       	sbci	r27, 0xFF	; 255
    23dc:	fe 01       	movw	r30, r28
    23de:	e5 56       	subi	r30, 0x65	; 101
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	80 81       	ld	r24, Z
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	8c 93       	st	X, r24
    23e8:	fe 01       	movw	r30, r28
    23ea:	e5 56       	subi	r30, 0x65	; 101
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	85 30       	cpi	r24, 0x05	; 5
    23f2:	08 f4       	brcc	.+2      	; 0x23f6 <CreatePwd+0x4a8>
    23f4:	7a ce       	rjmp	.-780    	; 0x20ea <CreatePwd+0x19c>
    23f6:	fe 01       	movw	r30, r28
    23f8:	e3 59       	subi	r30, 0x93	; 147
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	aa e7       	ldi	r26, 0x7A	; 122
    2402:	b3 e4       	ldi	r27, 0x43	; 67
    2404:	80 83       	st	Z, r24
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	a2 83       	std	Z+2, r26	; 0x02
    240a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	8e 01       	movw	r16, r28
    240e:	07 59       	subi	r16, 0x97	; 151
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	fe 01       	movw	r30, r28
    2414:	e3 59       	subi	r30, 0x93	; 147
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	f8 01       	movw	r30, r16
    2432:	80 83       	st	Z, r24
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	a2 83       	std	Z+2, r26	; 0x02
    2438:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    243a:	fe 01       	movw	r30, r28
    243c:	e7 59       	subi	r30, 0x97	; 151
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	44 f4       	brge	.+16     	; 0x2468 <CreatePwd+0x51a>
		__ticks = 1;
    2458:	fe 01       	movw	r30, r28
    245a:	e9 59       	subi	r30, 0x99	; 153
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	64 c0       	rjmp	.+200    	; 0x2530 <CreatePwd+0x5e2>
	else if (__tmp > 65535)
    2468:	fe 01       	movw	r30, r28
    246a:	e7 59       	subi	r30, 0x97	; 151
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	60 81       	ld	r22, Z
    2470:	71 81       	ldd	r23, Z+1	; 0x01
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	93 81       	ldd	r25, Z+3	; 0x03
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	0c f0       	brlt	.+2      	; 0x2488 <CreatePwd+0x53a>
    2486:	43 c0       	rjmp	.+134    	; 0x250e <CreatePwd+0x5c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2488:	fe 01       	movw	r30, r28
    248a:	e3 59       	subi	r30, 0x93	; 147
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8e 01       	movw	r16, r28
    24a8:	09 59       	subi	r16, 0x99	; 153
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	bc 01       	movw	r22, r24
    24ae:	cd 01       	movw	r24, r26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	f8 01       	movw	r30, r16
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	1f c0       	rjmp	.+62     	; 0x24fe <CreatePwd+0x5b0>
    24c0:	fe 01       	movw	r30, r28
    24c2:	eb 59       	subi	r30, 0x9B	; 155
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	88 ec       	ldi	r24, 0xC8	; 200
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	80 83       	st	Z, r24
    24ce:	fe 01       	movw	r30, r28
    24d0:	eb 59       	subi	r30, 0x9B	; 155
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <CreatePwd+0x58a>
    24dc:	fe 01       	movw	r30, r28
    24de:	eb 59       	subi	r30, 0x9B	; 155
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e6:	de 01       	movw	r26, r28
    24e8:	a9 59       	subi	r26, 0x99	; 153
    24ea:	bf 4f       	sbci	r27, 0xFF	; 255
    24ec:	fe 01       	movw	r30, r28
    24ee:	e9 59       	subi	r30, 0x99	; 153
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	11 96       	adiw	r26, 0x01	; 1
    24fa:	9c 93       	st	X, r25
    24fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	fe 01       	movw	r30, r28
    2500:	e9 59       	subi	r30, 0x99	; 153
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	80 81       	ld	r24, Z
    2506:	91 81       	ldd	r25, Z+1	; 0x01
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	d1 f6       	brne	.-76     	; 0x24c0 <CreatePwd+0x572>
    250c:	27 c0       	rjmp	.+78     	; 0x255c <CreatePwd+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	8e 01       	movw	r16, r28
    2510:	09 59       	subi	r16, 0x99	; 153
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	fe 01       	movw	r30, r28
    2516:	e7 59       	subi	r30, 0x97	; 151
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	f8 01       	movw	r30, r16
    252c:	91 83       	std	Z+1, r25	; 0x01
    252e:	80 83       	st	Z, r24
    2530:	de 01       	movw	r26, r28
    2532:	ad 59       	subi	r26, 0x9D	; 157
    2534:	bf 4f       	sbci	r27, 0xFF	; 255
    2536:	fe 01       	movw	r30, r28
    2538:	e9 59       	subi	r30, 0x99	; 153
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	8d 93       	st	X+, r24
    2542:	9c 93       	st	X, r25
    2544:	fe 01       	movw	r30, r28
    2546:	ed 59       	subi	r30, 0x9D	; 157
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <CreatePwd+0x600>
    2552:	fe 01       	movw	r30, r28
    2554:	ed 59       	subi	r30, 0x9D	; 157
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	80 83       	st	Z, r24
		_delay_ms(250);
		LCD_displayCharacter('*');
		_delay_ms(250);
	}
	_delay_ms(250);
	while(KEYPAD_getPressedKey() != '=');
    255c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    2560:	8d 33       	cpi	r24, 0x3D	; 61
    2562:	e1 f7       	brne	.-8      	; 0x255c <CreatePwd+0x60e>
	pwd1[i]='#';
    2564:	fe 01       	movw	r30, r28
    2566:	e5 56       	subi	r30, 0x65	; 101
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	fc 01       	movw	r30, r24
    2572:	e0 50       	subi	r30, 0x00	; 0
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	83 e2       	ldi	r24, 0x23	; 35
    2578:	80 83       	st	Z, r24

	UART_sendByte(receive_NewPass);
    257a:	8a e0       	ldi	r24, 0x0A	; 10
    257c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <UART_sendByte>

	UART_sendString(pwd1);
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <UART_sendString>
    2588:	fe 01       	movw	r30, r28
    258a:	e1 5a       	subi	r30, 0xA1	; 161
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 e2       	ldi	r26, 0x20	; 32
    2594:	b1 e4       	ldi	r27, 0x41	; 65
    2596:	80 83       	st	Z, r24
    2598:	91 83       	std	Z+1, r25	; 0x01
    259a:	a2 83       	std	Z+2, r26	; 0x02
    259c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259e:	8e 01       	movw	r16, r28
    25a0:	05 5a       	subi	r16, 0xA5	; 165
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	fe 01       	movw	r30, r28
    25a6:	e1 5a       	subi	r30, 0xA1	; 161
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	60 81       	ld	r22, Z
    25ac:	71 81       	ldd	r23, Z+1	; 0x01
    25ae:	82 81       	ldd	r24, Z+2	; 0x02
    25b0:	93 81       	ldd	r25, Z+3	; 0x03
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	4a ef       	ldi	r20, 0xFA	; 250
    25b8:	54 e4       	ldi	r21, 0x44	; 68
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	f8 01       	movw	r30, r16
    25c4:	80 83       	st	Z, r24
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	a2 83       	std	Z+2, r26	; 0x02
    25ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25cc:	fe 01       	movw	r30, r28
    25ce:	e5 5a       	subi	r30, 0xA5	; 165
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	44 f4       	brge	.+16     	; 0x25fa <CreatePwd+0x6ac>
		__ticks = 1;
    25ea:	fe 01       	movw	r30, r28
    25ec:	e7 5a       	subi	r30, 0xA7	; 167
    25ee:	ff 4f       	sbci	r31, 0xFF	; 255
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	64 c0       	rjmp	.+200    	; 0x26c2 <CreatePwd+0x774>
	else if (__tmp > 65535)
    25fa:	fe 01       	movw	r30, r28
    25fc:	e5 5a       	subi	r30, 0xA5	; 165
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	3f ef       	ldi	r19, 0xFF	; 255
    260c:	4f e7       	ldi	r20, 0x7F	; 127
    260e:	57 e4       	ldi	r21, 0x47	; 71
    2610:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2614:	18 16       	cp	r1, r24
    2616:	0c f0       	brlt	.+2      	; 0x261a <CreatePwd+0x6cc>
    2618:	43 c0       	rjmp	.+134    	; 0x26a0 <CreatePwd+0x752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261a:	fe 01       	movw	r30, r28
    261c:	e1 5a       	subi	r30, 0xA1	; 161
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8e 01       	movw	r16, r28
    263a:	07 5a       	subi	r16, 0xA7	; 167
    263c:	1f 4f       	sbci	r17, 0xFF	; 255
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	f8 01       	movw	r30, r16
    264c:	91 83       	std	Z+1, r25	; 0x01
    264e:	80 83       	st	Z, r24
    2650:	1f c0       	rjmp	.+62     	; 0x2690 <CreatePwd+0x742>
    2652:	fe 01       	movw	r30, r28
    2654:	e9 5a       	subi	r30, 0xA9	; 169
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	88 ec       	ldi	r24, 0xC8	; 200
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	fe 01       	movw	r30, r28
    2662:	e9 5a       	subi	r30, 0xA9	; 169
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 81       	ld	r24, Z
    2668:	91 81       	ldd	r25, Z+1	; 0x01
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <CreatePwd+0x71c>
    266e:	fe 01       	movw	r30, r28
    2670:	e9 5a       	subi	r30, 0xA9	; 169
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2678:	de 01       	movw	r26, r28
    267a:	a7 5a       	subi	r26, 0xA7	; 167
    267c:	bf 4f       	sbci	r27, 0xFF	; 255
    267e:	fe 01       	movw	r30, r28
    2680:	e7 5a       	subi	r30, 0xA7	; 167
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	11 96       	adiw	r26, 0x01	; 1
    268c:	9c 93       	st	X, r25
    268e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	fe 01       	movw	r30, r28
    2692:	e7 5a       	subi	r30, 0xA7	; 167
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	d1 f6       	brne	.-76     	; 0x2652 <CreatePwd+0x704>
    269e:	27 c0       	rjmp	.+78     	; 0x26ee <CreatePwd+0x7a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a0:	8e 01       	movw	r16, r28
    26a2:	07 5a       	subi	r16, 0xA7	; 167
    26a4:	1f 4f       	sbci	r17, 0xFF	; 255
    26a6:	fe 01       	movw	r30, r28
    26a8:	e5 5a       	subi	r30, 0xA5	; 165
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	60 81       	ld	r22, Z
    26ae:	71 81       	ldd	r23, Z+1	; 0x01
    26b0:	82 81       	ldd	r24, Z+2	; 0x02
    26b2:	93 81       	ldd	r25, Z+3	; 0x03
    26b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	de 01       	movw	r26, r28
    26c4:	ab 5a       	subi	r26, 0xAB	; 171
    26c6:	bf 4f       	sbci	r27, 0xFF	; 255
    26c8:	fe 01       	movw	r30, r28
    26ca:	e7 5a       	subi	r30, 0xA7	; 167
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	80 81       	ld	r24, Z
    26d0:	91 81       	ldd	r25, Z+1	; 0x01
    26d2:	8d 93       	st	X+, r24
    26d4:	9c 93       	st	X, r25
    26d6:	fe 01       	movw	r30, r28
    26d8:	eb 5a       	subi	r30, 0xAB	; 171
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	91 81       	ldd	r25, Z+1	; 0x01
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <CreatePwd+0x792>
    26e4:	fe 01       	movw	r30, r28
    26e6:	eb 5a       	subi	r30, 0xAB	; 171
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
	_delay_ms(10);
	LCD_clearScreen();
    26ee:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>

	LCD_moveCursor(0, 0);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
	LCD_displayString("Plz Re-enter The");
    26fa:	8f e6       	ldi	r24, 0x6F	; 111
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
	LCD_displayString("Same Pass: ");
    270a:	80 e8       	ldi	r24, 0x80	; 128
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
    2712:	fe 01       	movw	r30, r28
    2714:	ef 5a       	subi	r30, 0xAF	; 175
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	aa e7       	ldi	r26, 0x7A	; 122
    271e:	b3 e4       	ldi	r27, 0x43	; 67
    2720:	80 83       	st	Z, r24
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	a2 83       	std	Z+2, r26	; 0x02
    2726:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	8e 01       	movw	r16, r28
    272a:	03 5b       	subi	r16, 0xB3	; 179
    272c:	1f 4f       	sbci	r17, 0xFF	; 255
    272e:	fe 01       	movw	r30, r28
    2730:	ef 5a       	subi	r30, 0xAF	; 175
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	4a ef       	ldi	r20, 0xFA	; 250
    2742:	54 e4       	ldi	r21, 0x44	; 68
    2744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2748:	dc 01       	movw	r26, r24
    274a:	cb 01       	movw	r24, r22
    274c:	f8 01       	movw	r30, r16
    274e:	80 83       	st	Z, r24
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	a2 83       	std	Z+2, r26	; 0x02
    2754:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2756:	fe 01       	movw	r30, r28
    2758:	e3 5b       	subi	r30, 0xB3	; 179
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	44 f4       	brge	.+16     	; 0x2784 <CreatePwd+0x836>
		__ticks = 1;
    2774:	fe 01       	movw	r30, r28
    2776:	e5 5b       	subi	r30, 0xB5	; 181
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
    2782:	64 c0       	rjmp	.+200    	; 0x284c <CreatePwd+0x8fe>
	else if (__tmp > 65535)
    2784:	fe 01       	movw	r30, r28
    2786:	e3 5b       	subi	r30, 0xB3	; 179
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	3f ef       	ldi	r19, 0xFF	; 255
    2796:	4f e7       	ldi	r20, 0x7F	; 127
    2798:	57 e4       	ldi	r21, 0x47	; 71
    279a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    279e:	18 16       	cp	r1, r24
    27a0:	0c f0       	brlt	.+2      	; 0x27a4 <CreatePwd+0x856>
    27a2:	43 c0       	rjmp	.+134    	; 0x282a <CreatePwd+0x8dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	fe 01       	movw	r30, r28
    27a6:	ef 5a       	subi	r30, 0xAF	; 175
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e2       	ldi	r20, 0x20	; 32
    27b8:	51 e4       	ldi	r21, 0x41	; 65
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	8e 01       	movw	r16, r28
    27c4:	05 5b       	subi	r16, 0xB5	; 181
    27c6:	1f 4f       	sbci	r17, 0xFF	; 255
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	f8 01       	movw	r30, r16
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
    27da:	1f c0       	rjmp	.+62     	; 0x281a <CreatePwd+0x8cc>
    27dc:	fe 01       	movw	r30, r28
    27de:	e7 5b       	subi	r30, 0xB7	; 183
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	88 ec       	ldi	r24, 0xC8	; 200
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
    27ea:	fe 01       	movw	r30, r28
    27ec:	e7 5b       	subi	r30, 0xB7	; 183
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <CreatePwd+0x8a6>
    27f8:	fe 01       	movw	r30, r28
    27fa:	e7 5b       	subi	r30, 0xB7	; 183
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	91 83       	std	Z+1, r25	; 0x01
    2800:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2802:	de 01       	movw	r26, r28
    2804:	a5 5b       	subi	r26, 0xB5	; 181
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	e5 5b       	subi	r30, 0xB5	; 181
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	11 96       	adiw	r26, 0x01	; 1
    2816:	9c 93       	st	X, r25
    2818:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281a:	fe 01       	movw	r30, r28
    281c:	e5 5b       	subi	r30, 0xB5	; 181
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	80 81       	ld	r24, Z
    2822:	91 81       	ldd	r25, Z+1	; 0x01
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	d1 f6       	brne	.-76     	; 0x27dc <CreatePwd+0x88e>
    2828:	28 c0       	rjmp	.+80     	; 0x287a <CreatePwd+0x92c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282a:	8e 01       	movw	r16, r28
    282c:	05 5b       	subi	r16, 0xB5	; 181
    282e:	1f 4f       	sbci	r17, 0xFF	; 255
    2830:	fe 01       	movw	r30, r28
    2832:	e3 5b       	subi	r30, 0xB3	; 179
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	f8 01       	movw	r30, r16
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
    284c:	de 01       	movw	r26, r28
    284e:	a9 5b       	subi	r26, 0xB9	; 185
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	e5 5b       	subi	r30, 0xB5	; 181
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	11 96       	adiw	r26, 0x01	; 1
    285e:	9c 93       	st	X, r25
    2860:	8e 93       	st	-X, r24
    2862:	fe 01       	movw	r30, r28
    2864:	e9 5b       	subi	r30, 0xB9	; 185
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	80 81       	ld	r24, Z
    286a:	91 81       	ldd	r25, Z+1	; 0x01
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <CreatePwd+0x91e>
    2870:	fe 01       	movw	r30, r28
    2872:	e9 5b       	subi	r30, 0xB9	; 185
    2874:	ff 4f       	sbci	r31, 0xFF	; 255
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
	_delay_ms(250);
	for (i=0; i<5; i++){
    287a:	fe 01       	movw	r30, r28
    287c:	e5 56       	subi	r30, 0x65	; 101
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	10 82       	st	Z, r1
    2882:	10 c1       	rjmp	.+544    	; 0x2aa4 <CreatePwd+0xb56>
		pwd2[i]=KEYPAD_getPressedKey()+48;
    2884:	fe 01       	movw	r30, r28
    2886:	e5 56       	subi	r30, 0x65	; 101
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	08 2f       	mov	r16, r24
    288e:	10 e0       	ldi	r17, 0x00	; 0
    2890:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    2894:	80 5d       	subi	r24, 0xD0	; 208
    2896:	f8 01       	movw	r30, r16
    2898:	e3 5f       	subi	r30, 0xF3	; 243
    289a:	fe 4f       	sbci	r31, 0xFE	; 254
    289c:	80 83       	st	Z, r24
    289e:	fe 01       	movw	r30, r28
    28a0:	ed 5b       	subi	r30, 0xBD	; 189
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	aa e7       	ldi	r26, 0x7A	; 122
    28aa:	b3 e4       	ldi	r27, 0x43	; 67
    28ac:	80 83       	st	Z, r24
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	a2 83       	std	Z+2, r26	; 0x02
    28b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	8e 01       	movw	r16, r28
    28b6:	01 5c       	subi	r16, 0xC1	; 193
    28b8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 5b       	subi	r30, 0xBD	; 189
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	4a ef       	ldi	r20, 0xFA	; 250
    28ce:	54 e4       	ldi	r21, 0x44	; 68
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	80 83       	st	Z, r24
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	a2 83       	std	Z+2, r26	; 0x02
    28e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28e2:	fe 01       	movw	r30, r28
    28e4:	ff 96       	adiw	r30, 0x3f	; 63
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e8       	ldi	r20, 0x80	; 128
    28f4:	5f e3       	ldi	r21, 0x3F	; 63
    28f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28fa:	88 23       	and	r24, r24
    28fc:	2c f4       	brge	.+10     	; 0x2908 <CreatePwd+0x9ba>
		__ticks = 1;
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	9e af       	std	Y+62, r25	; 0x3e
    2904:	8d af       	std	Y+61, r24	; 0x3d
    2906:	46 c0       	rjmp	.+140    	; 0x2994 <CreatePwd+0xa46>
	else if (__tmp > 65535)
    2908:	fe 01       	movw	r30, r28
    290a:	ff 96       	adiw	r30, 0x3f	; 63
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	3f ef       	ldi	r19, 0xFF	; 255
    2918:	4f e7       	ldi	r20, 0x7F	; 127
    291a:	57 e4       	ldi	r21, 0x47	; 71
    291c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2920:	18 16       	cp	r1, r24
    2922:	64 f5       	brge	.+88     	; 0x297c <CreatePwd+0xa2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2924:	fe 01       	movw	r30, r28
    2926:	ed 5b       	subi	r30, 0xBD	; 189
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	60 81       	ld	r22, Z
    292c:	71 81       	ldd	r23, Z+1	; 0x01
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	51 e4       	ldi	r21, 0x41	; 65
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	bc 01       	movw	r22, r24
    2944:	cd 01       	movw	r24, r26
    2946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294a:	dc 01       	movw	r26, r24
    294c:	cb 01       	movw	r24, r22
    294e:	9e af       	std	Y+62, r25	; 0x3e
    2950:	8d af       	std	Y+61, r24	; 0x3d
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <CreatePwd+0xa24>
    2954:	88 ec       	ldi	r24, 0xC8	; 200
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9c af       	std	Y+60, r25	; 0x3c
    295a:	8b af       	std	Y+59, r24	; 0x3b
    295c:	8b ad       	ldd	r24, Y+59	; 0x3b
    295e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <CreatePwd+0xa12>
    2964:	9c af       	std	Y+60, r25	; 0x3c
    2966:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2968:	8d ad       	ldd	r24, Y+61	; 0x3d
    296a:	9e ad       	ldd	r25, Y+62	; 0x3e
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	9e af       	std	Y+62, r25	; 0x3e
    2970:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2972:	8d ad       	ldd	r24, Y+61	; 0x3d
    2974:	9e ad       	ldd	r25, Y+62	; 0x3e
    2976:	00 97       	sbiw	r24, 0x00	; 0
    2978:	69 f7       	brne	.-38     	; 0x2954 <CreatePwd+0xa06>
    297a:	16 c0       	rjmp	.+44     	; 0x29a8 <CreatePwd+0xa5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297c:	fe 01       	movw	r30, r28
    297e:	ff 96       	adiw	r30, 0x3f	; 63
    2980:	60 81       	ld	r22, Z
    2982:	71 81       	ldd	r23, Z+1	; 0x01
    2984:	82 81       	ldd	r24, Z+2	; 0x02
    2986:	93 81       	ldd	r25, Z+3	; 0x03
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9e af       	std	Y+62, r25	; 0x3e
    2992:	8d af       	std	Y+61, r24	; 0x3d
    2994:	8d ad       	ldd	r24, Y+61	; 0x3d
    2996:	9e ad       	ldd	r25, Y+62	; 0x3e
    2998:	9a af       	std	Y+58, r25	; 0x3a
    299a:	89 af       	std	Y+57, r24	; 0x39
    299c:	89 ad       	ldd	r24, Y+57	; 0x39
    299e:	9a ad       	ldd	r25, Y+58	; 0x3a
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <CreatePwd+0xa52>
    29a4:	9a af       	std	Y+58, r25	; 0x3a
    29a6:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(250);
		LCD_displayCharacter('*');
    29a8:	8a e2       	ldi	r24, 0x2A	; 42
    29aa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_displayCharacter>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	aa e7       	ldi	r26, 0x7A	; 122
    29b4:	b3 e4       	ldi	r27, 0x43	; 67
    29b6:	8d ab       	std	Y+53, r24	; 0x35
    29b8:	9e ab       	std	Y+54, r25	; 0x36
    29ba:	af ab       	std	Y+55, r26	; 0x37
    29bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6d a9       	ldd	r22, Y+53	; 0x35
    29c0:	7e a9       	ldd	r23, Y+54	; 0x36
    29c2:	8f a9       	ldd	r24, Y+55	; 0x37
    29c4:	98 ad       	ldd	r25, Y+56	; 0x38
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a ef       	ldi	r20, 0xFA	; 250
    29cc:	54 e4       	ldi	r21, 0x44	; 68
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	89 ab       	std	Y+49, r24	; 0x31
    29d8:	9a ab       	std	Y+50, r25	; 0x32
    29da:	ab ab       	std	Y+51, r26	; 0x33
    29dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29de:	69 a9       	ldd	r22, Y+49	; 0x31
    29e0:	7a a9       	ldd	r23, Y+50	; 0x32
    29e2:	8b a9       	ldd	r24, Y+51	; 0x33
    29e4:	9c a9       	ldd	r25, Y+52	; 0x34
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <CreatePwd+0xab2>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	98 ab       	std	Y+48, r25	; 0x30
    29fc:	8f a7       	std	Y+47, r24	; 0x2f
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <CreatePwd+0xb30>
	else if (__tmp > 65535)
    2a00:	69 a9       	ldd	r22, Y+49	; 0x31
    2a02:	7a a9       	ldd	r23, Y+50	; 0x32
    2a04:	8b a9       	ldd	r24, Y+51	; 0x33
    2a06:	9c a9       	ldd	r25, Y+52	; 0x34
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <CreatePwd+0xb1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6d a9       	ldd	r22, Y+53	; 0x35
    2a1a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a1c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a1e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	98 ab       	std	Y+48, r25	; 0x30
    2a3e:	8f a7       	std	Y+47, r24	; 0x2f
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <CreatePwd+0xb12>
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9e a7       	std	Y+46, r25	; 0x2e
    2a48:	8d a7       	std	Y+45, r24	; 0x2d
    2a4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <CreatePwd+0xb00>
    2a52:	9e a7       	std	Y+46, r25	; 0x2e
    2a54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a58:	98 a9       	ldd	r25, Y+48	; 0x30
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	98 ab       	std	Y+48, r25	; 0x30
    2a5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a62:	98 a9       	ldd	r25, Y+48	; 0x30
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <CreatePwd+0xaf4>
    2a68:	14 c0       	rjmp	.+40     	; 0x2a92 <CreatePwd+0xb44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a70:	9c a9       	ldd	r25, Y+52	; 0x34
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	98 ab       	std	Y+48, r25	; 0x30
    2a7c:	8f a7       	std	Y+47, r24	; 0x2f
    2a7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a80:	98 a9       	ldd	r25, Y+48	; 0x30
    2a82:	9c a7       	std	Y+44, r25	; 0x2c
    2a84:	8b a7       	std	Y+43, r24	; 0x2b
    2a86:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a88:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <CreatePwd+0xb3c>
    2a8e:	9c a7       	std	Y+44, r25	; 0x2c
    2a90:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_moveCursor(0, 0);
	LCD_displayString("Plz Re-enter The");
	LCD_moveCursor(1, 0);
	LCD_displayString("Same Pass: ");
	_delay_ms(250);
	for (i=0; i<5; i++){
    2a92:	de 01       	movw	r26, r28
    2a94:	a5 56       	subi	r26, 0x65	; 101
    2a96:	bf 4f       	sbci	r27, 0xFF	; 255
    2a98:	fe 01       	movw	r30, r28
    2a9a:	e5 56       	subi	r30, 0x65	; 101
    2a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9e:	80 81       	ld	r24, Z
    2aa0:	8f 5f       	subi	r24, 0xFF	; 255
    2aa2:	8c 93       	st	X, r24
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 56       	subi	r30, 0x65	; 101
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	85 30       	cpi	r24, 0x05	; 5
    2aae:	08 f4       	brcc	.+2      	; 0x2ab2 <CreatePwd+0xb64>
    2ab0:	e9 ce       	rjmp	.-558    	; 0x2884 <CreatePwd+0x936>
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	aa e7       	ldi	r26, 0x7A	; 122
    2ab8:	b3 e4       	ldi	r27, 0x43	; 67
    2aba:	8f a3       	std	Y+39, r24	; 0x27
    2abc:	98 a7       	std	Y+40, r25	; 0x28
    2abe:	a9 a7       	std	Y+41, r26	; 0x29
    2ac0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ac4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ac6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ac8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4a ef       	ldi	r20, 0xFA	; 250
    2ad0:	54 e4       	ldi	r21, 0x44	; 68
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	8b a3       	std	Y+35, r24	; 0x23
    2adc:	9c a3       	std	Y+36, r25	; 0x24
    2ade:	ad a3       	std	Y+37, r26	; 0x25
    2ae0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e8       	ldi	r20, 0x80	; 128
    2af0:	5f e3       	ldi	r21, 0x3F	; 63
    2af2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af6:	88 23       	and	r24, r24
    2af8:	2c f4       	brge	.+10     	; 0x2b04 <CreatePwd+0xbb6>
		__ticks = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	9a a3       	std	Y+34, r25	; 0x22
    2b00:	89 a3       	std	Y+33, r24	; 0x21
    2b02:	3f c0       	rjmp	.+126    	; 0x2b82 <CreatePwd+0xc34>
	else if (__tmp > 65535)
    2b04:	6b a1       	ldd	r22, Y+35	; 0x23
    2b06:	7c a1       	ldd	r23, Y+36	; 0x24
    2b08:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	3f ef       	ldi	r19, 0xFF	; 255
    2b10:	4f e7       	ldi	r20, 0x7F	; 127
    2b12:	57 e4       	ldi	r21, 0x47	; 71
    2b14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b18:	18 16       	cp	r1, r24
    2b1a:	4c f5       	brge	.+82     	; 0x2b6e <CreatePwd+0xc20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b20:	89 a5       	ldd	r24, Y+41	; 0x29
    2b22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e2       	ldi	r20, 0x20	; 32
    2b2a:	51 e4       	ldi	r21, 0x41	; 65
    2b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9a a3       	std	Y+34, r25	; 0x22
    2b42:	89 a3       	std	Y+33, r24	; 0x21
    2b44:	0f c0       	rjmp	.+30     	; 0x2b64 <CreatePwd+0xc16>
    2b46:	88 ec       	ldi	r24, 0xC8	; 200
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	98 a3       	std	Y+32, r25	; 0x20
    2b4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2b4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b50:	98 a1       	ldd	r25, Y+32	; 0x20
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	f1 f7       	brne	.-4      	; 0x2b52 <CreatePwd+0xc04>
    2b56:	98 a3       	std	Y+32, r25	; 0x20
    2b58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	9a a3       	std	Y+34, r25	; 0x22
    2b62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b64:	89 a1       	ldd	r24, Y+33	; 0x21
    2b66:	9a a1       	ldd	r25, Y+34	; 0x22
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	69 f7       	brne	.-38     	; 0x2b46 <CreatePwd+0xbf8>
    2b6c:	14 c0       	rjmp	.+40     	; 0x2b96 <CreatePwd+0xc48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b70:	7c a1       	ldd	r23, Y+36	; 0x24
    2b72:	8d a1       	ldd	r24, Y+37	; 0x25
    2b74:	9e a1       	ldd	r25, Y+38	; 0x26
    2b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9a a3       	std	Y+34, r25	; 0x22
    2b80:	89 a3       	std	Y+33, r24	; 0x21
    2b82:	89 a1       	ldd	r24, Y+33	; 0x21
    2b84:	9a a1       	ldd	r25, Y+34	; 0x22
    2b86:	9e 8f       	std	Y+30, r25	; 0x1e
    2b88:	8d 8f       	std	Y+29, r24	; 0x1d
    2b8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <CreatePwd+0xc40>
    2b92:	9e 8f       	std	Y+30, r25	; 0x1e
    2b94:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		LCD_displayCharacter('*');
		_delay_ms(250);
	}
	_delay_ms(250);
	while(KEYPAD_getPressedKey() != '=');
    2b96:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    2b9a:	8d 33       	cpi	r24, 0x3D	; 61
    2b9c:	e1 f7       	brne	.-8      	; 0x2b96 <CreatePwd+0xc48>
	pwd2[i]='#';
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e5 56       	subi	r30, 0x65	; 101
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	fc 01       	movw	r30, r24
    2bac:	e3 5f       	subi	r30, 0xF3	; 243
    2bae:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb0:	83 e2       	ldi	r24, 0x23	; 35
    2bb2:	80 83       	st	Z, r24



	UART_sendString(pwd2);
    2bb4:	8d e0       	ldi	r24, 0x0D	; 13
    2bb6:	91 e0       	ldi	r25, 0x01	; 1
    2bb8:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <UART_sendString>
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	a0 e2       	ldi	r26, 0x20	; 32
    2bc2:	b1 e4       	ldi	r27, 0x41	; 65
    2bc4:	89 8f       	std	Y+25, r24	; 0x19
    2bc6:	9a 8f       	std	Y+26, r25	; 0x1a
    2bc8:	ab 8f       	std	Y+27, r26	; 0x1b
    2bca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	4a ef       	ldi	r20, 0xFA	; 250
    2bda:	54 e4       	ldi	r21, 0x44	; 68
    2bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8d 8b       	std	Y+21, r24	; 0x15
    2be6:	9e 8b       	std	Y+22, r25	; 0x16
    2be8:	af 8b       	std	Y+23, r26	; 0x17
    2bea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bec:	6d 89       	ldd	r22, Y+21	; 0x15
    2bee:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e8       	ldi	r20, 0x80	; 128
    2bfa:	5f e3       	ldi	r21, 0x3F	; 63
    2bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c00:	88 23       	and	r24, r24
    2c02:	2c f4       	brge	.+10     	; 0x2c0e <CreatePwd+0xcc0>
		__ticks = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	9c 8b       	std	Y+20, r25	; 0x14
    2c0a:	8b 8b       	std	Y+19, r24	; 0x13
    2c0c:	3f c0       	rjmp	.+126    	; 0x2c8c <CreatePwd+0xd3e>
	else if (__tmp > 65535)
    2c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c10:	7e 89       	ldd	r23, Y+22	; 0x16
    2c12:	8f 89       	ldd	r24, Y+23	; 0x17
    2c14:	98 8d       	ldd	r25, Y+24	; 0x18
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	3f ef       	ldi	r19, 0xFF	; 255
    2c1a:	4f e7       	ldi	r20, 0x7F	; 127
    2c1c:	57 e4       	ldi	r21, 0x47	; 71
    2c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c22:	18 16       	cp	r1, r24
    2c24:	4c f5       	brge	.+82     	; 0x2c78 <CreatePwd+0xd2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c26:	69 8d       	ldd	r22, Y+25	; 0x19
    2c28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e2       	ldi	r20, 0x20	; 32
    2c34:	51 e4       	ldi	r21, 0x41	; 65
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9c 8b       	std	Y+20, r25	; 0x14
    2c4c:	8b 8b       	std	Y+19, r24	; 0x13
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <CreatePwd+0xd20>
    2c50:	88 ec       	ldi	r24, 0xC8	; 200
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9a 8b       	std	Y+18, r25	; 0x12
    2c56:	89 8b       	std	Y+17, r24	; 0x11
    2c58:	89 89       	ldd	r24, Y+17	; 0x11
    2c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <CreatePwd+0xd0e>
    2c60:	9a 8b       	std	Y+18, r25	; 0x12
    2c62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c64:	8b 89       	ldd	r24, Y+19	; 0x13
    2c66:	9c 89       	ldd	r25, Y+20	; 0x14
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c70:	9c 89       	ldd	r25, Y+20	; 0x14
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <CreatePwd+0xd02>
    2c76:	14 c0       	rjmp	.+40     	; 0x2ca0 <CreatePwd+0xd52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	9c 8b       	std	Y+20, r25	; 0x14
    2c8a:	8b 8b       	std	Y+19, r24	; 0x13
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	98 8b       	std	Y+16, r25	; 0x10
    2c92:	8f 87       	std	Y+15, r24	; 0x0f
    2c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c96:	98 89       	ldd	r25, Y+16	; 0x10
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <CreatePwd+0xd4a>
    2c9c:	98 8b       	std	Y+16, r25	; 0x10
    2c9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_clearScreen();
    2ca0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>



	g_compare = UART_recieveByte();
    2ca4:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <UART_recieveByte>
    2ca8:	80 93 fa 00 	sts	0x00FA, r24
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	a0 e7       	ldi	r26, 0x70	; 112
    2cb2:	b1 e4       	ldi	r27, 0x41	; 65
    2cb4:	8b 87       	std	Y+11, r24	; 0x0b
    2cb6:	9c 87       	std	Y+12, r25	; 0x0c
    2cb8:	ad 87       	std	Y+13, r26	; 0x0d
    2cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	4a ef       	ldi	r20, 0xFA	; 250
    2cca:	54 e4       	ldi	r21, 0x44	; 68
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	8f 83       	std	Y+7, r24	; 0x07
    2cd6:	98 87       	std	Y+8, r25	; 0x08
    2cd8:	a9 87       	std	Y+9, r26	; 0x09
    2cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cde:	78 85       	ldd	r23, Y+8	; 0x08
    2ce0:	89 85       	ldd	r24, Y+9	; 0x09
    2ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e8       	ldi	r20, 0x80	; 128
    2cea:	5f e3       	ldi	r21, 0x3F	; 63
    2cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf0:	88 23       	and	r24, r24
    2cf2:	2c f4       	brge	.+10     	; 0x2cfe <CreatePwd+0xdb0>
		__ticks = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	3f c0       	rjmp	.+126    	; 0x2d7c <CreatePwd+0xe2e>
	else if (__tmp > 65535)
    2cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2d00:	78 85       	ldd	r23, Y+8	; 0x08
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	3f ef       	ldi	r19, 0xFF	; 255
    2d0a:	4f e7       	ldi	r20, 0x7F	; 127
    2d0c:	57 e4       	ldi	r21, 0x47	; 71
    2d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d12:	18 16       	cp	r1, r24
    2d14:	4c f5       	brge	.+82     	; 0x2d68 <CreatePwd+0xe1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9e 83       	std	Y+6, r25	; 0x06
    2d3c:	8d 83       	std	Y+5, r24	; 0x05
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <CreatePwd+0xe10>
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9c 83       	std	Y+4, r25	; 0x04
    2d46:	8b 83       	std	Y+3, r24	; 0x03
    2d48:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <CreatePwd+0xdfe>
    2d50:	9c 83       	std	Y+4, r25	; 0x04
    2d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	8d 81       	ldd	r24, Y+5	; 0x05
    2d56:	9e 81       	ldd	r25, Y+6	; 0x06
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9e 83       	std	Y+6, r25	; 0x06
    2d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <CreatePwd+0xdf2>
    2d66:	14 c0       	rjmp	.+40     	; 0x2d90 <CreatePwd+0xe42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6a:	78 85       	ldd	r23, Y+8	; 0x08
    2d6c:	89 85       	ldd	r24, Y+9	; 0x09
    2d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	9a 81       	ldd	r25, Y+2	; 0x02
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <CreatePwd+0xe3a>
    2d8c:	9a 83       	std	Y+2, r25	; 0x02
    2d8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);
	if(g_compare == 1){
    2d90:	80 91 fa 00 	lds	r24, 0x00FA
    2d94:	81 30       	cpi	r24, 0x01	; 1
    2d96:	31 f0       	breq	.+12     	; 0x2da4 <CreatePwd+0xe56>
		return; }
	else if(g_compare == 0)
    2d98:	80 91 fa 00 	lds	r24, 0x00FA
    2d9c:	88 23       	and	r24, r24
    2d9e:	11 f4       	brne	.+4      	; 0x2da4 <CreatePwd+0xe56>
		CreatePwd();
    2da0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <CreatePwd>


}
    2da4:	c5 56       	subi	r28, 0x65	; 101
    2da6:	df 4f       	sbci	r29, 0xFF	; 255
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	cf 91       	pop	r28
    2db4:	df 91       	pop	r29
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	08 95       	ret

00002dbc <EnterPwd>:

void EnterPwd(void){
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	c7 54       	subi	r28, 0x47	; 71
    2dca:	d0 40       	sbci	r29, 0x00	; 0
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    2dd6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>
	LCD_displayString("Plz Enter Pass");
    2dda:	8c e8       	ldi	r24, 0x8C	; 140
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
    2de2:	fe 01       	movw	r30, r28
    2de4:	ed 5b       	subi	r30, 0xBD	; 189
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	a8 ec       	ldi	r26, 0xC8	; 200
    2dee:	b2 e4       	ldi	r27, 0x42	; 66
    2df0:	80 83       	st	Z, r24
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	a2 83       	std	Z+2, r26	; 0x02
    2df6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df8:	8e 01       	movw	r16, r28
    2dfa:	01 5c       	subi	r16, 0xC1	; 193
    2dfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ed 5b       	subi	r30, 0xBD	; 189
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	60 81       	ld	r22, Z
    2e06:	71 81       	ldd	r23, Z+1	; 0x01
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	93 81       	ldd	r25, Z+3	; 0x03
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	4a ef       	ldi	r20, 0xFA	; 250
    2e12:	54 e4       	ldi	r21, 0x44	; 68
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	80 83       	st	Z, r24
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	a2 83       	std	Z+2, r26	; 0x02
    2e24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e26:	fe 01       	movw	r30, r28
    2e28:	ff 96       	adiw	r30, 0x3f	; 63
    2e2a:	60 81       	ld	r22, Z
    2e2c:	71 81       	ldd	r23, Z+1	; 0x01
    2e2e:	82 81       	ldd	r24, Z+2	; 0x02
    2e30:	93 81       	ldd	r25, Z+3	; 0x03
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e8       	ldi	r20, 0x80	; 128
    2e38:	5f e3       	ldi	r21, 0x3F	; 63
    2e3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e3e:	88 23       	and	r24, r24
    2e40:	2c f4       	brge	.+10     	; 0x2e4c <EnterPwd+0x90>
		__ticks = 1;
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	9e af       	std	Y+62, r25	; 0x3e
    2e48:	8d af       	std	Y+61, r24	; 0x3d
    2e4a:	46 c0       	rjmp	.+140    	; 0x2ed8 <EnterPwd+0x11c>
	else if (__tmp > 65535)
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	ff 96       	adiw	r30, 0x3f	; 63
    2e50:	60 81       	ld	r22, Z
    2e52:	71 81       	ldd	r23, Z+1	; 0x01
    2e54:	82 81       	ldd	r24, Z+2	; 0x02
    2e56:	93 81       	ldd	r25, Z+3	; 0x03
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	64 f5       	brge	.+88     	; 0x2ec0 <EnterPwd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ed 5b       	subi	r30, 0xBD	; 189
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	51 e4       	ldi	r21, 0x41	; 65
    2e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	9e af       	std	Y+62, r25	; 0x3e
    2e94:	8d af       	std	Y+61, r24	; 0x3d
    2e96:	0f c0       	rjmp	.+30     	; 0x2eb6 <EnterPwd+0xfa>
    2e98:	88 ec       	ldi	r24, 0xC8	; 200
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	9c af       	std	Y+60, r25	; 0x3c
    2e9e:	8b af       	std	Y+59, r24	; 0x3b
    2ea0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ea2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <EnterPwd+0xe8>
    2ea8:	9c af       	std	Y+60, r25	; 0x3c
    2eaa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eac:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eae:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb0:	01 97       	sbiw	r24, 0x01	; 1
    2eb2:	9e af       	std	Y+62, r25	; 0x3e
    2eb4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eba:	00 97       	sbiw	r24, 0x00	; 0
    2ebc:	69 f7       	brne	.-38     	; 0x2e98 <EnterPwd+0xdc>
    2ebe:	16 c0       	rjmp	.+44     	; 0x2eec <EnterPwd+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	ff 96       	adiw	r30, 0x3f	; 63
    2ec4:	60 81       	ld	r22, Z
    2ec6:	71 81       	ldd	r23, Z+1	; 0x01
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	93 81       	ldd	r25, Z+3	; 0x03
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9e af       	std	Y+62, r25	; 0x3e
    2ed6:	8d af       	std	Y+61, r24	; 0x3d
    2ed8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eda:	9e ad       	ldd	r25, Y+62	; 0x3e
    2edc:	9a af       	std	Y+58, r25	; 0x3a
    2ede:	89 af       	std	Y+57, r24	; 0x39
    2ee0:	89 ad       	ldd	r24, Y+57	; 0x39
    2ee2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <EnterPwd+0x128>
    2ee8:	9a af       	std	Y+58, r25	; 0x3a
    2eea:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	LCD_moveCursor(1, 0);
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	aa e7       	ldi	r26, 0x7A	; 122
    2efa:	b3 e4       	ldi	r27, 0x43	; 67
    2efc:	8d ab       	std	Y+53, r24	; 0x35
    2efe:	9e ab       	std	Y+54, r25	; 0x36
    2f00:	af ab       	std	Y+55, r26	; 0x37
    2f02:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f04:	6d a9       	ldd	r22, Y+53	; 0x35
    2f06:	7e a9       	ldd	r23, Y+54	; 0x36
    2f08:	8f a9       	ldd	r24, Y+55	; 0x37
    2f0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4a ef       	ldi	r20, 0xFA	; 250
    2f12:	54 e4       	ldi	r21, 0x44	; 68
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	89 ab       	std	Y+49, r24	; 0x31
    2f1e:	9a ab       	std	Y+50, r25	; 0x32
    2f20:	ab ab       	std	Y+51, r26	; 0x33
    2f22:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f24:	69 a9       	ldd	r22, Y+49	; 0x31
    2f26:	7a a9       	ldd	r23, Y+50	; 0x32
    2f28:	8b a9       	ldd	r24, Y+51	; 0x33
    2f2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e8       	ldi	r20, 0x80	; 128
    2f32:	5f e3       	ldi	r21, 0x3F	; 63
    2f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	2c f4       	brge	.+10     	; 0x2f46 <EnterPwd+0x18a>
		__ticks = 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	98 ab       	std	Y+48, r25	; 0x30
    2f42:	8f a7       	std	Y+47, r24	; 0x2f
    2f44:	3f c0       	rjmp	.+126    	; 0x2fc4 <EnterPwd+0x208>
	else if (__tmp > 65535)
    2f46:	69 a9       	ldd	r22, Y+49	; 0x31
    2f48:	7a a9       	ldd	r23, Y+50	; 0x32
    2f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	3f ef       	ldi	r19, 0xFF	; 255
    2f52:	4f e7       	ldi	r20, 0x7F	; 127
    2f54:	57 e4       	ldi	r21, 0x47	; 71
    2f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f5a:	18 16       	cp	r1, r24
    2f5c:	4c f5       	brge	.+82     	; 0x2fb0 <EnterPwd+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f60:	7e a9       	ldd	r23, Y+54	; 0x36
    2f62:	8f a9       	ldd	r24, Y+55	; 0x37
    2f64:	98 ad       	ldd	r25, Y+56	; 0x38
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e2       	ldi	r20, 0x20	; 32
    2f6c:	51 e4       	ldi	r21, 0x41	; 65
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	98 ab       	std	Y+48, r25	; 0x30
    2f84:	8f a7       	std	Y+47, r24	; 0x2f
    2f86:	0f c0       	rjmp	.+30     	; 0x2fa6 <EnterPwd+0x1ea>
    2f88:	88 ec       	ldi	r24, 0xC8	; 200
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9e a7       	std	Y+46, r25	; 0x2e
    2f8e:	8d a7       	std	Y+45, r24	; 0x2d
    2f90:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f92:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	f1 f7       	brne	.-4      	; 0x2f94 <EnterPwd+0x1d8>
    2f98:	9e a7       	std	Y+46, r25	; 0x2e
    2f9a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9e:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	98 ab       	std	Y+48, r25	; 0x30
    2fa4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa8:	98 a9       	ldd	r25, Y+48	; 0x30
    2faa:	00 97       	sbiw	r24, 0x00	; 0
    2fac:	69 f7       	brne	.-38     	; 0x2f88 <EnterPwd+0x1cc>
    2fae:	14 c0       	rjmp	.+40     	; 0x2fd8 <EnterPwd+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	98 ab       	std	Y+48, r25	; 0x30
    2fc2:	8f a7       	std	Y+47, r24	; 0x2f
    2fc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc8:	9c a7       	std	Y+44, r25	; 0x2c
    2fca:	8b a7       	std	Y+43, r24	; 0x2b
    2fcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fce:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <EnterPwd+0x214>
    2fd4:	9c a7       	std	Y+44, r25	; 0x2c
    2fd6:	8b a7       	std	Y+43, r24	; 0x2b
	uint8 i;
	_delay_ms(250);
	for (i=0; i<5; i++){
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e9 5b       	subi	r30, 0xB9	; 185
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	10 82       	st	Z, r1
    2fe0:	fd c0       	rjmp	.+506    	; 0x31dc <EnterPwd+0x420>
		pwd1[i]=KEYPAD_getPressedKey()+48;
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e9 5b       	subi	r30, 0xB9	; 185
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	08 2f       	mov	r16, r24
    2fec:	10 e0       	ldi	r17, 0x00	; 0
    2fee:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    2ff2:	80 5d       	subi	r24, 0xD0	; 208
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	e0 50       	subi	r30, 0x00	; 0
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	80 83       	st	Z, r24
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	aa e7       	ldi	r26, 0x7A	; 122
    3002:	b3 e4       	ldi	r27, 0x43	; 67
    3004:	8f a3       	std	Y+39, r24	; 0x27
    3006:	98 a7       	std	Y+40, r25	; 0x28
    3008:	a9 a7       	std	Y+41, r26	; 0x29
    300a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300c:	6f a1       	ldd	r22, Y+39	; 0x27
    300e:	78 a5       	ldd	r23, Y+40	; 0x28
    3010:	89 a5       	ldd	r24, Y+41	; 0x29
    3012:	9a a5       	ldd	r25, Y+42	; 0x2a
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	4a ef       	ldi	r20, 0xFA	; 250
    301a:	54 e4       	ldi	r21, 0x44	; 68
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8b a3       	std	Y+35, r24	; 0x23
    3026:	9c a3       	std	Y+36, r25	; 0x24
    3028:	ad a3       	std	Y+37, r26	; 0x25
    302a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    302c:	6b a1       	ldd	r22, Y+35	; 0x23
    302e:	7c a1       	ldd	r23, Y+36	; 0x24
    3030:	8d a1       	ldd	r24, Y+37	; 0x25
    3032:	9e a1       	ldd	r25, Y+38	; 0x26
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	5f e3       	ldi	r21, 0x3F	; 63
    303c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3040:	88 23       	and	r24, r24
    3042:	2c f4       	brge	.+10     	; 0x304e <EnterPwd+0x292>
		__ticks = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9a a3       	std	Y+34, r25	; 0x22
    304a:	89 a3       	std	Y+33, r24	; 0x21
    304c:	3f c0       	rjmp	.+126    	; 0x30cc <EnterPwd+0x310>
	else if (__tmp > 65535)
    304e:	6b a1       	ldd	r22, Y+35	; 0x23
    3050:	7c a1       	ldd	r23, Y+36	; 0x24
    3052:	8d a1       	ldd	r24, Y+37	; 0x25
    3054:	9e a1       	ldd	r25, Y+38	; 0x26
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	3f ef       	ldi	r19, 0xFF	; 255
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	57 e4       	ldi	r21, 0x47	; 71
    305e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	4c f5       	brge	.+82     	; 0x30b8 <EnterPwd+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3066:	6f a1       	ldd	r22, Y+39	; 0x27
    3068:	78 a5       	ldd	r23, Y+40	; 0x28
    306a:	89 a5       	ldd	r24, Y+41	; 0x29
    306c:	9a a5       	ldd	r25, Y+42	; 0x2a
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9a a3       	std	Y+34, r25	; 0x22
    308c:	89 a3       	std	Y+33, r24	; 0x21
    308e:	0f c0       	rjmp	.+30     	; 0x30ae <EnterPwd+0x2f2>
    3090:	88 ec       	ldi	r24, 0xC8	; 200
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	98 a3       	std	Y+32, r25	; 0x20
    3096:	8f 8f       	std	Y+31, r24	; 0x1f
    3098:	8f 8d       	ldd	r24, Y+31	; 0x1f
    309a:	98 a1       	ldd	r25, Y+32	; 0x20
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <EnterPwd+0x2e0>
    30a0:	98 a3       	std	Y+32, r25	; 0x20
    30a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a4:	89 a1       	ldd	r24, Y+33	; 0x21
    30a6:	9a a1       	ldd	r25, Y+34	; 0x22
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	9a a3       	std	Y+34, r25	; 0x22
    30ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ae:	89 a1       	ldd	r24, Y+33	; 0x21
    30b0:	9a a1       	ldd	r25, Y+34	; 0x22
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	69 f7       	brne	.-38     	; 0x3090 <EnterPwd+0x2d4>
    30b6:	14 c0       	rjmp	.+40     	; 0x30e0 <EnterPwd+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ba:	7c a1       	ldd	r23, Y+36	; 0x24
    30bc:	8d a1       	ldd	r24, Y+37	; 0x25
    30be:	9e a1       	ldd	r25, Y+38	; 0x26
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9a a3       	std	Y+34, r25	; 0x22
    30ca:	89 a3       	std	Y+33, r24	; 0x21
    30cc:	89 a1       	ldd	r24, Y+33	; 0x21
    30ce:	9a a1       	ldd	r25, Y+34	; 0x22
    30d0:	9e 8f       	std	Y+30, r25	; 0x1e
    30d2:	8d 8f       	std	Y+29, r24	; 0x1d
    30d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <EnterPwd+0x31c>
    30dc:	9e 8f       	std	Y+30, r25	; 0x1e
    30de:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(250);
		LCD_displayCharacter('*');
    30e0:	8a e2       	ldi	r24, 0x2A	; 42
    30e2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_displayCharacter>
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	aa e7       	ldi	r26, 0x7A	; 122
    30ec:	b3 e4       	ldi	r27, 0x43	; 67
    30ee:	89 8f       	std	Y+25, r24	; 0x19
    30f0:	9a 8f       	std	Y+26, r25	; 0x1a
    30f2:	ab 8f       	std	Y+27, r26	; 0x1b
    30f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f6:	69 8d       	ldd	r22, Y+25	; 0x19
    30f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	4a ef       	ldi	r20, 0xFA	; 250
    3104:	54 e4       	ldi	r21, 0x44	; 68
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	8d 8b       	std	Y+21, r24	; 0x15
    3110:	9e 8b       	std	Y+22, r25	; 0x16
    3112:	af 8b       	std	Y+23, r26	; 0x17
    3114:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3116:	6d 89       	ldd	r22, Y+21	; 0x15
    3118:	7e 89       	ldd	r23, Y+22	; 0x16
    311a:	8f 89       	ldd	r24, Y+23	; 0x17
    311c:	98 8d       	ldd	r25, Y+24	; 0x18
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e8       	ldi	r20, 0x80	; 128
    3124:	5f e3       	ldi	r21, 0x3F	; 63
    3126:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    312a:	88 23       	and	r24, r24
    312c:	2c f4       	brge	.+10     	; 0x3138 <EnterPwd+0x37c>
		__ticks = 1;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9c 8b       	std	Y+20, r25	; 0x14
    3134:	8b 8b       	std	Y+19, r24	; 0x13
    3136:	3f c0       	rjmp	.+126    	; 0x31b6 <EnterPwd+0x3fa>
	else if (__tmp > 65535)
    3138:	6d 89       	ldd	r22, Y+21	; 0x15
    313a:	7e 89       	ldd	r23, Y+22	; 0x16
    313c:	8f 89       	ldd	r24, Y+23	; 0x17
    313e:	98 8d       	ldd	r25, Y+24	; 0x18
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	3f ef       	ldi	r19, 0xFF	; 255
    3144:	4f e7       	ldi	r20, 0x7F	; 127
    3146:	57 e4       	ldi	r21, 0x47	; 71
    3148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314c:	18 16       	cp	r1, r24
    314e:	4c f5       	brge	.+82     	; 0x31a2 <EnterPwd+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3150:	69 8d       	ldd	r22, Y+25	; 0x19
    3152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e2       	ldi	r20, 0x20	; 32
    315e:	51 e4       	ldi	r21, 0x41	; 65
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	9c 8b       	std	Y+20, r25	; 0x14
    3176:	8b 8b       	std	Y+19, r24	; 0x13
    3178:	0f c0       	rjmp	.+30     	; 0x3198 <EnterPwd+0x3dc>
    317a:	88 ec       	ldi	r24, 0xC8	; 200
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9a 8b       	std	Y+18, r25	; 0x12
    3180:	89 8b       	std	Y+17, r24	; 0x11
    3182:	89 89       	ldd	r24, Y+17	; 0x11
    3184:	9a 89       	ldd	r25, Y+18	; 0x12
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <EnterPwd+0x3ca>
    318a:	9a 8b       	std	Y+18, r25	; 0x12
    318c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318e:	8b 89       	ldd	r24, Y+19	; 0x13
    3190:	9c 89       	ldd	r25, Y+20	; 0x14
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	9c 8b       	std	Y+20, r25	; 0x14
    3196:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3198:	8b 89       	ldd	r24, Y+19	; 0x13
    319a:	9c 89       	ldd	r25, Y+20	; 0x14
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	69 f7       	brne	.-38     	; 0x317a <EnterPwd+0x3be>
    31a0:	14 c0       	rjmp	.+40     	; 0x31ca <EnterPwd+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a2:	6d 89       	ldd	r22, Y+21	; 0x15
    31a4:	7e 89       	ldd	r23, Y+22	; 0x16
    31a6:	8f 89       	ldd	r24, Y+23	; 0x17
    31a8:	98 8d       	ldd	r25, Y+24	; 0x18
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9c 8b       	std	Y+20, r25	; 0x14
    31b4:	8b 8b       	std	Y+19, r24	; 0x13
    31b6:	8b 89       	ldd	r24, Y+19	; 0x13
    31b8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ba:	98 8b       	std	Y+16, r25	; 0x10
    31bc:	8f 87       	std	Y+15, r24	; 0x0f
    31be:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c0:	98 89       	ldd	r25, Y+16	; 0x10
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <EnterPwd+0x406>
    31c6:	98 8b       	std	Y+16, r25	; 0x10
    31c8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayString("Plz Enter Pass");
	_delay_ms(100);
	LCD_moveCursor(1, 0);
	uint8 i;
	_delay_ms(250);
	for (i=0; i<5; i++){
    31ca:	de 01       	movw	r26, r28
    31cc:	a9 5b       	subi	r26, 0xB9	; 185
    31ce:	bf 4f       	sbci	r27, 0xFF	; 255
    31d0:	fe 01       	movw	r30, r28
    31d2:	e9 5b       	subi	r30, 0xB9	; 185
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	80 81       	ld	r24, Z
    31d8:	8f 5f       	subi	r24, 0xFF	; 255
    31da:	8c 93       	st	X, r24
    31dc:	fe 01       	movw	r30, r28
    31de:	e9 5b       	subi	r30, 0xB9	; 185
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	85 30       	cpi	r24, 0x05	; 5
    31e6:	08 f4       	brcc	.+2      	; 0x31ea <EnterPwd+0x42e>
    31e8:	fc ce       	rjmp	.-520    	; 0x2fe2 <EnterPwd+0x226>
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	aa e7       	ldi	r26, 0x7A	; 122
    31f0:	b3 e4       	ldi	r27, 0x43	; 67
    31f2:	8b 87       	std	Y+11, r24	; 0x0b
    31f4:	9c 87       	std	Y+12, r25	; 0x0c
    31f6:	ad 87       	std	Y+13, r26	; 0x0d
    31f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    31fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3200:	9e 85       	ldd	r25, Y+14	; 0x0e
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	4a ef       	ldi	r20, 0xFA	; 250
    3208:	54 e4       	ldi	r21, 0x44	; 68
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	8f 83       	std	Y+7, r24	; 0x07
    3214:	98 87       	std	Y+8, r25	; 0x08
    3216:	a9 87       	std	Y+9, r26	; 0x09
    3218:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    321a:	6f 81       	ldd	r22, Y+7	; 0x07
    321c:	78 85       	ldd	r23, Y+8	; 0x08
    321e:	89 85       	ldd	r24, Y+9	; 0x09
    3220:	9a 85       	ldd	r25, Y+10	; 0x0a
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	40 e8       	ldi	r20, 0x80	; 128
    3228:	5f e3       	ldi	r21, 0x3F	; 63
    322a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    322e:	88 23       	and	r24, r24
    3230:	2c f4       	brge	.+10     	; 0x323c <EnterPwd+0x480>
		__ticks = 1;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
    323a:	3f c0       	rjmp	.+126    	; 0x32ba <EnterPwd+0x4fe>
	else if (__tmp > 65535)
    323c:	6f 81       	ldd	r22, Y+7	; 0x07
    323e:	78 85       	ldd	r23, Y+8	; 0x08
    3240:	89 85       	ldd	r24, Y+9	; 0x09
    3242:	9a 85       	ldd	r25, Y+10	; 0x0a
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	3f ef       	ldi	r19, 0xFF	; 255
    3248:	4f e7       	ldi	r20, 0x7F	; 127
    324a:	57 e4       	ldi	r21, 0x47	; 71
    324c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3250:	18 16       	cp	r1, r24
    3252:	4c f5       	brge	.+82     	; 0x32a6 <EnterPwd+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3254:	6b 85       	ldd	r22, Y+11	; 0x0b
    3256:	7c 85       	ldd	r23, Y+12	; 0x0c
    3258:	8d 85       	ldd	r24, Y+13	; 0x0d
    325a:	9e 85       	ldd	r25, Y+14	; 0x0e
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e2       	ldi	r20, 0x20	; 32
    3262:	51 e4       	ldi	r21, 0x41	; 65
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	9e 83       	std	Y+6, r25	; 0x06
    327a:	8d 83       	std	Y+5, r24	; 0x05
    327c:	0f c0       	rjmp	.+30     	; 0x329c <EnterPwd+0x4e0>
    327e:	88 ec       	ldi	r24, 0xC8	; 200
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	9c 83       	std	Y+4, r25	; 0x04
    3284:	8b 83       	std	Y+3, r24	; 0x03
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <EnterPwd+0x4ce>
    328e:	9c 83       	std	Y+4, r25	; 0x04
    3290:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	9e 81       	ldd	r25, Y+6	; 0x06
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	69 f7       	brne	.-38     	; 0x327e <EnterPwd+0x4c2>
    32a4:	14 c0       	rjmp	.+40     	; 0x32ce <EnterPwd+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a6:	6f 81       	ldd	r22, Y+7	; 0x07
    32a8:	78 85       	ldd	r23, Y+8	; 0x08
    32aa:	89 85       	ldd	r24, Y+9	; 0x09
    32ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	9a 83       	std	Y+2, r25	; 0x02
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	9a 81       	ldd	r25, Y+2	; 0x02
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	f1 f7       	brne	.-4      	; 0x32c6 <EnterPwd+0x50a>
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter('*');
		_delay_ms(250);
	}

	_delay_ms(250);
	while(KEYPAD_getPressedKey() != '=');
    32ce:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    32d2:	8d 33       	cpi	r24, 0x3D	; 61
    32d4:	e1 f7       	brne	.-8      	; 0x32ce <EnterPwd+0x512>
	pwd1[i]='#';
    32d6:	fe 01       	movw	r30, r28
    32d8:	e9 5b       	subi	r30, 0xB9	; 185
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 81       	ld	r24, Z
    32de:	88 2f       	mov	r24, r24
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	fc 01       	movw	r30, r24
    32e4:	e0 50       	subi	r30, 0x00	; 0
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	83 e2       	ldi	r24, 0x23	; 35
    32ea:	80 83       	st	Z, r24

	UART_sendByte(check_pwd);
    32ec:	8d e0       	ldi	r24, 0x0D	; 13
    32ee:	0e 94 57 1c 	call	0x38ae	; 0x38ae <UART_sendByte>

	UART_sendString(pwd1);
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	91 e0       	ldi	r25, 0x01	; 1
    32f6:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <UART_sendString>

	g_compare = UART_recieveByte();
    32fa:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <UART_recieveByte>
    32fe:	80 93 fa 00 	sts	0x00FA, r24
    3302:	75 c0       	rjmp	.+234    	; 0x33ee <EnterPwd+0x632>

	while(g_checkpwd < 2){
		if(g_compare == 1){
    3304:	80 91 fa 00 	lds	r24, 0x00FA
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	19 f4       	brne	.+6      	; 0x3312 <EnterPwd+0x556>
			g_checkpwd = 0;
    330c:	10 92 fb 00 	sts	0x00FB, r1
    3310:	73 c0       	rjmp	.+230    	; 0x33f8 <EnterPwd+0x63c>
			return;
			}
		else if(g_compare == 0) {
    3312:	80 91 fa 00 	lds	r24, 0x00FA
    3316:	88 23       	and	r24, r24
    3318:	39 f4       	brne	.+14     	; 0x3328 <EnterPwd+0x56c>
			g_checkpwd++;
    331a:	80 91 fb 00 	lds	r24, 0x00FB
    331e:	8f 5f       	subi	r24, 0xFF	; 255
    3320:	80 93 fb 00 	sts	0x00FB, r24
			EnterPwd();
    3324:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <EnterPwd>
		}
		if (g_checkpwd == 2)
    3328:	80 91 fb 00 	lds	r24, 0x00FB
    332c:	82 30       	cpi	r24, 0x02	; 2
    332e:	09 f0       	breq	.+2      	; 0x3332 <EnterPwd+0x576>
    3330:	5e c0       	rjmp	.+188    	; 0x33ee <EnterPwd+0x632>
		{
			UART_sendByte(wrong_Pass);
    3332:	8c e0       	ldi	r24, 0x0C	; 12
    3334:	0e 94 57 1c 	call	0x38ae	; 0x38ae <UART_sendByte>

			LCD_clearScreen();
    3338:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"ERROR, wait!");
    333c:	2b e9       	ldi	r18, 0x9B	; 155
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	60 e0       	ldi	r22, 0x00	; 0
    3344:	a9 01       	movw	r20, r18
    3346:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,3,"seconds");
    334a:	28 ea       	ldi	r18, 0xA8	; 168
    334c:	30 e0       	ldi	r19, 0x00	; 0
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	63 e0       	ldi	r22, 0x03	; 3
    3352:	a9 01       	movw	r20, r18
    3354:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_displayStringRowColumn>
			g_tick = 0;
    3358:	10 92 fd 00 	sts	0x00FD, r1
    335c:	3d c0       	rjmp	.+122    	; 0x33d8 <EnterPwd+0x61c>
			while (g_tick < 60)
			{
				LCD_displayStringRowColumn(0,0,"ERROR, wait!");
    335e:	2b e9       	ldi	r18, 0x9B	; 155
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	a9 01       	movw	r20, r18
    3368:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,3,"seconds");
    336c:	28 ea       	ldi	r18, 0xA8	; 168
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	63 e0       	ldi	r22, 0x03	; 3
    3374:	a9 01       	movw	r20, r18
    3376:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_displayStringRowColumn>
				LCD_moveCursor(1,0);
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	60 e0       	ldi	r22, 0x00	; 0
    337e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
				if ((60 - g_tick) > 10)
    3382:	80 91 fd 00 	lds	r24, 0x00FD
    3386:	28 2f       	mov	r18, r24
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	8c e3       	ldi	r24, 0x3C	; 60
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	82 1b       	sub	r24, r18
    3390:	93 0b       	sbc	r25, r19
    3392:	8b 30       	cpi	r24, 0x0B	; 11
    3394:	91 05       	cpc	r25, r1
    3396:	5c f0       	brlt	.+22     	; 0x33ae <EnterPwd+0x5f2>
				{
				LCD_intgerToString(60 - g_tick);
    3398:	80 91 fd 00 	lds	r24, 0x00FD
    339c:	28 2f       	mov	r18, r24
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	8c e3       	ldi	r24, 0x3C	; 60
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	82 1b       	sub	r24, r18
    33a6:	93 0b       	sbc	r25, r19
    33a8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_intgerToString>
    33ac:	15 c0       	rjmp	.+42     	; 0x33d8 <EnterPwd+0x61c>
				}
				else
				{
					LCD_displayStringRowColumn(1,0,"  ");
    33ae:	20 eb       	ldi	r18, 0xB0	; 176
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	a9 01       	movw	r20, r18
    33b8:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_displayStringRowColumn>
					LCD_moveCursor(1,0);
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
					LCD_intgerToString(60 - g_tick);
    33c4:	80 91 fd 00 	lds	r24, 0x00FD
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	8c e3       	ldi	r24, 0x3C	; 60
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	82 1b       	sub	r24, r18
    33d2:	93 0b       	sbc	r25, r19
    33d4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_intgerToString>

			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"ERROR, wait!");
			LCD_displayStringRowColumn(1,3,"seconds");
			g_tick = 0;
			while (g_tick < 60)
    33d8:	80 91 fd 00 	lds	r24, 0x00FD
    33dc:	8c 33       	cpi	r24, 0x3C	; 60
    33de:	08 f4       	brcc	.+2      	; 0x33e2 <EnterPwd+0x626>
    33e0:	be cf       	rjmp	.-132    	; 0x335e <EnterPwd+0x5a2>
					LCD_displayStringRowColumn(1,0,"  ");
					LCD_moveCursor(1,0);
					LCD_intgerToString(60 - g_tick);
				}
			}
			g_checkpwd = 0;
    33e2:	10 92 fb 00 	sts	0x00FB, r1
			LCD_clearScreen();
    33e6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>
			MainOptions();
    33ea:	0e 94 08 1a 	call	0x3410	; 0x3410 <MainOptions>

	UART_sendString(pwd1);

	g_compare = UART_recieveByte();

	while(g_checkpwd < 2){
    33ee:	80 91 fb 00 	lds	r24, 0x00FB
    33f2:	82 30       	cpi	r24, 0x02	; 2
    33f4:	08 f4       	brcc	.+2      	; 0x33f8 <EnterPwd+0x63c>
    33f6:	86 cf       	rjmp	.-244    	; 0x3304 <EnterPwd+0x548>

	}



}
    33f8:	c9 5b       	subi	r28, 0xB9	; 185
    33fa:	df 4f       	sbci	r29, 0xFF	; 255
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	1f 91       	pop	r17
    340c:	0f 91       	pop	r16
    340e:	08 95       	ret

00003410 <MainOptions>:

void MainOptions (void){
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	2e 97       	sbiw	r28, 0x0e	; 14
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61

	 g_changePass = 1;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	80 93 06 01 	sts	0x0106, r24

	LCD_displayString("+ : Open Door");
    342a:	83 eb       	ldi	r24, 0xB3	; 179
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
	LCD_moveCursor(1, 0);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <LCD_moveCursor>
	LCD_displayString("- : Change pass");
    343a:	81 ec       	ldi	r24, 0xC1	; 193
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>

	if (KEYPAD_getPressedKey() == '+'){
    3442:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    3446:	8b 32       	cpi	r24, 0x2B	; 43
    3448:	09 f0       	breq	.+2      	; 0x344c <MainOptions+0x3c>
    344a:	a2 c0       	rjmp	.+324    	; 0x3590 <MainOptions+0x180>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a8 e4       	ldi	r26, 0x48	; 72
    3452:	b3 e4       	ldi	r27, 0x43	; 67
    3454:	8b 87       	std	Y+11, r24	; 0x0b
    3456:	9c 87       	std	Y+12, r25	; 0x0c
    3458:	ad 87       	std	Y+13, r26	; 0x0d
    345a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	4a ef       	ldi	r20, 0xFA	; 250
    346a:	54 e4       	ldi	r21, 0x44	; 68
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	8f 83       	std	Y+7, r24	; 0x07
    3476:	98 87       	std	Y+8, r25	; 0x08
    3478:	a9 87       	std	Y+9, r26	; 0x09
    347a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e8       	ldi	r20, 0x80	; 128
    348a:	5f e3       	ldi	r21, 0x3F	; 63
    348c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3490:	88 23       	and	r24, r24
    3492:	2c f4       	brge	.+10     	; 0x349e <MainOptions+0x8e>
		__ticks = 1;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	9e 83       	std	Y+6, r25	; 0x06
    349a:	8d 83       	std	Y+5, r24	; 0x05
    349c:	3f c0       	rjmp	.+126    	; 0x351c <MainOptions+0x10c>
	else if (__tmp > 65535)
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	3f ef       	ldi	r19, 0xFF	; 255
    34aa:	4f e7       	ldi	r20, 0x7F	; 127
    34ac:	57 e4       	ldi	r21, 0x47	; 71
    34ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34b2:	18 16       	cp	r1, r24
    34b4:	4c f5       	brge	.+82     	; 0x3508 <MainOptions+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    34bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e2       	ldi	r20, 0x20	; 32
    34c4:	51 e4       	ldi	r21, 0x41	; 65
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9e 83       	std	Y+6, r25	; 0x06
    34dc:	8d 83       	std	Y+5, r24	; 0x05
    34de:	0f c0       	rjmp	.+30     	; 0x34fe <MainOptions+0xee>
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9c 83       	std	Y+4, r25	; 0x04
    34e6:	8b 83       	std	Y+3, r24	; 0x03
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <MainOptions+0xdc>
    34f0:	9c 83       	std	Y+4, r25	; 0x04
    34f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	69 f7       	brne	.-38     	; 0x34e0 <MainOptions+0xd0>
    3506:	14 c0       	rjmp	.+40     	; 0x3530 <MainOptions+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3508:	6f 81       	ldd	r22, Y+7	; 0x07
    350a:	78 85       	ldd	r23, Y+8	; 0x08
    350c:	89 85       	ldd	r24, Y+9	; 0x09
    350e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	8d 81       	ldd	r24, Y+5	; 0x05
    351e:	9e 81       	ldd	r25, Y+6	; 0x06
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	89 83       	std	Y+1, r24	; 0x01
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <MainOptions+0x118>
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(200);
		EnterPwd();
    3530:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <EnterPwd>

		if (g_changePass == 0){
    3534:	80 91 06 01 	lds	r24, 0x0106
    3538:	88 23       	and	r24, r24
    353a:	b1 f1       	breq	.+108    	; 0x35a8 <MainOptions+0x198>
			return;
		}

		UART_sendByte(open_Door);
    353c:	8b e0       	ldi	r24, 0x0B	; 11
    353e:	0e 94 57 1c 	call	0x38ae	; 0x38ae <UART_sendByte>
		g_tick=0;
    3542:	10 92 fd 00 	sts	0x00FD, r1

		LCD_clearScreen();
    3546:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>

		LCD_displayString("door unlocking");
    354a:	81 ed       	ldi	r24, 0xD1	; 209
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>

		while (g_tick <= 15){}
    3552:	80 91 fd 00 	lds	r24, 0x00FD
    3556:	80 31       	cpi	r24, 0x10	; 16
    3558:	e0 f3       	brcs	.-8      	; 0x3552 <MainOptions+0x142>


        g_tick=0;
    355a:	10 92 fd 00 	sts	0x00FD, r1
		LCD_clearScreen();
    355e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>
		LCD_displayString("....");
    3562:	80 ee       	ldi	r24, 0xE0	; 224
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
		while (g_tick <= 3);
    356a:	80 91 fd 00 	lds	r24, 0x00FD
    356e:	84 30       	cpi	r24, 0x04	; 4
    3570:	e0 f3       	brcs	.-8      	; 0x356a <MainOptions+0x15a>

		g_tick=0;
    3572:	10 92 fd 00 	sts	0x00FD, r1

		LCD_clearScreen();
    3576:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>
		LCD_displayString("door locking");
    357a:	85 ee       	ldi	r24, 0xE5	; 229
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <LCD_displayString>
		while (g_tick <=15){}
    3582:	80 91 fd 00 	lds	r24, 0x00FD
    3586:	80 31       	cpi	r24, 0x10	; 16
    3588:	e0 f3       	brcs	.-8      	; 0x3582 <MainOptions+0x172>

		LCD_clearScreen();
    358a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>
    358e:	0c c0       	rjmp	.+24     	; 0x35a8 <MainOptions+0x198>


	}

	else if (KEYPAD_getPressedKey() == '-'){
    3590:	0e 94 e5 08 	call	0x11ca	; 0x11ca <KEYPAD_getPressedKey>
    3594:	8d 32       	cpi	r24, 0x2D	; 45
    3596:	41 f4       	brne	.+16     	; 0x35a8 <MainOptions+0x198>

		g_changePass = 0;
    3598:	10 92 06 01 	sts	0x0106, r1
		EnterPwd();
    359c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <EnterPwd>
		LCD_clearScreen();
    35a0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_clearScreen>
		CreatePwd();
    35a4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <CreatePwd>



	}

}
    35a8:	2e 96       	adiw	r28, 0x0e	; 14
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <main>:


int main(){
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	27 97       	sbiw	r28, 0x07	; 7
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    35ce:	af e5       	ldi	r26, 0x5F	; 95
    35d0:	b0 e0       	ldi	r27, 0x00	; 0
    35d2:	ef e5       	ldi	r30, 0x5F	; 95
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	80 81       	ld	r24, Z
    35d8:	80 68       	ori	r24, 0x80	; 128
    35da:	8c 93       	st	X, r24


	LCD_init();
    35dc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <LCD_init>

	UART_ConfigType uart_config;
	uart_config.baud_rate=9600;
    35e0:	80 e8       	ldi	r24, 0x80	; 128
    35e2:	95 e2       	ldi	r25, 0x25	; 37
    35e4:	a0 e0       	ldi	r26, 0x00	; 0
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	8c 83       	std	Y+4, r24	; 0x04
    35ea:	9d 83       	std	Y+5, r25	; 0x05
    35ec:	ae 83       	std	Y+6, r26	; 0x06
    35ee:	bf 83       	std	Y+7, r27	; 0x07
	uart_config.bit_data=bit_8;
    35f0:	86 e0       	ldi	r24, 0x06	; 6
    35f2:	89 83       	std	Y+1, r24	; 0x01
	uart_config.parity=Disabled;
    35f4:	1a 82       	std	Y+2, r1	; 0x02
	uart_config.stop_bit=one;
    35f6:	1b 82       	std	Y+3, r1	; 0x03
	UART_init(&uart_config);
    35f8:	ce 01       	movw	r24, r28
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <UART_init>

	timer_config.initial_value=0;
    3600:	10 92 08 01 	sts	0x0108, r1
    3604:	10 92 07 01 	sts	0x0107, r1
	timer_config.mode=COMPARE_MODE;
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	80 93 0c 01 	sts	0x010C, r24
	timer_config.prescaler=PRESCALER_1024;
    360e:	85 e0       	ldi	r24, 0x05	; 5
    3610:	80 93 0b 01 	sts	0x010B, r24
	timer_config.compare_value=7812;
    3614:	84 e8       	ldi	r24, 0x84	; 132
    3616:	9e e1       	ldi	r25, 0x1E	; 30
    3618:	90 93 0a 01 	sts	0x010A, r25
    361c:	80 93 09 01 	sts	0x0109, r24
	Timer1_init(&timer_config);
    3620:	87 e0       	ldi	r24, 0x07	; 7
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	0e 94 83 1b 	call	0x3706	; 0x3706 <Timer1_init>
	Timer1_setCallBack(tick);
    3628:	8b e9       	ldi	r24, 0x9B	; 155
    362a:	9f e0       	ldi	r25, 0x0F	; 15
    362c:	0e 94 de 1b 	call	0x37bc	; 0x37bc <Timer1_setCallBack>

	CreatePwd();
    3630:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <CreatePwd>


	while(1){

		MainOptions();
    3634:	0e 94 08 1a 	call	0x3410	; 0x3410 <MainOptions>
    3638:	fd cf       	rjmp	.-6      	; 0x3634 <main+0x7a>

0000363a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    363a:	1f 92       	push	r1
    363c:	0f 92       	push	r0
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	0f 92       	push	r0
    3642:	11 24       	eor	r1, r1
    3644:	2f 93       	push	r18
    3646:	3f 93       	push	r19
    3648:	4f 93       	push	r20
    364a:	5f 93       	push	r21
    364c:	6f 93       	push	r22
    364e:	7f 93       	push	r23
    3650:	8f 93       	push	r24
    3652:	9f 93       	push	r25
    3654:	af 93       	push	r26
    3656:	bf 93       	push	r27
    3658:	ef 93       	push	r30
    365a:	ff 93       	push	r31
    365c:	df 93       	push	r29
    365e:	cf 93       	push	r28
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3664:	80 91 fe 00 	lds	r24, 0x00FE
    3668:	90 91 ff 00 	lds	r25, 0x00FF
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	29 f0       	breq	.+10     	; 0x367a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after overflow*/
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3670:	e0 91 fe 00 	lds	r30, 0x00FE
    3674:	f0 91 ff 00 	lds	r31, 0x00FF
    3678:	09 95       	icall
	}
}
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	ff 91       	pop	r31
    3680:	ef 91       	pop	r30
    3682:	bf 91       	pop	r27
    3684:	af 91       	pop	r26
    3686:	9f 91       	pop	r25
    3688:	8f 91       	pop	r24
    368a:	7f 91       	pop	r23
    368c:	6f 91       	pop	r22
    368e:	5f 91       	pop	r21
    3690:	4f 91       	pop	r20
    3692:	3f 91       	pop	r19
    3694:	2f 91       	pop	r18
    3696:	0f 90       	pop	r0
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	0f 90       	pop	r0
    369c:	1f 90       	pop	r1
    369e:	18 95       	reti

000036a0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    36a0:	1f 92       	push	r1
    36a2:	0f 92       	push	r0
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	0f 92       	push	r0
    36a8:	11 24       	eor	r1, r1
    36aa:	2f 93       	push	r18
    36ac:	3f 93       	push	r19
    36ae:	4f 93       	push	r20
    36b0:	5f 93       	push	r21
    36b2:	6f 93       	push	r22
    36b4:	7f 93       	push	r23
    36b6:	8f 93       	push	r24
    36b8:	9f 93       	push	r25
    36ba:	af 93       	push	r26
    36bc:	bf 93       	push	r27
    36be:	ef 93       	push	r30
    36c0:	ff 93       	push	r31
    36c2:	df 93       	push	r29
    36c4:	cf 93       	push	r28
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    36ca:	80 91 fe 00 	lds	r24, 0x00FE
    36ce:	90 91 ff 00 	lds	r25, 0x00FF
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	29 f0       	breq	.+10     	; 0x36e0 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after reaching the compare value*/
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    36d6:	e0 91 fe 00 	lds	r30, 0x00FE
    36da:	f0 91 ff 00 	lds	r31, 0x00FF
    36de:	09 95       	icall
	}
}
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	ff 91       	pop	r31
    36e6:	ef 91       	pop	r30
    36e8:	bf 91       	pop	r27
    36ea:	af 91       	pop	r26
    36ec:	9f 91       	pop	r25
    36ee:	8f 91       	pop	r24
    36f0:	7f 91       	pop	r23
    36f2:	6f 91       	pop	r22
    36f4:	5f 91       	pop	r21
    36f6:	4f 91       	pop	r20
    36f8:	3f 91       	pop	r19
    36fa:	2f 91       	pop	r18
    36fc:	0f 90       	pop	r0
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	0f 90       	pop	r0
    3702:	1f 90       	pop	r1
    3704:	18 95       	reti

00003706 <Timer1_init>:
 * Description
 	 * Function to initialize the Timer driver
* Inputs: pointer to the configuration structure with type Timer1_ConfigType.
* Return: None
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3706:	df 93       	push	r29
    3708:	cf 93       	push	r28
    370a:	00 d0       	rcall	.+0      	; 0x370c <Timer1_init+0x6>
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	9a 83       	std	Y+2, r25	; 0x02
    3712:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1<<FOC1A);
    3714:	ef e4       	ldi	r30, 0x4F	; 79
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	88 e0       	ldi	r24, 0x08	; 8
    371a:	80 83       	st	Z, r24
	TCCR1B = (Config_Ptr->mode<<WGM12);
    371c:	ae e4       	ldi	r26, 0x4E	; 78
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e9 81       	ldd	r30, Y+1	; 0x01
    3722:	fa 81       	ldd	r31, Y+2	; 0x02
    3724:	85 81       	ldd	r24, Z+5	; 0x05
    3726:	88 0f       	add	r24, r24
    3728:	88 0f       	add	r24, r24
    372a:	88 0f       	add	r24, r24
    372c:	8c 93       	st	X, r24
	TCCR1B |= (Config_Ptr->prescaler);
    372e:	ae e4       	ldi	r26, 0x4E	; 78
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	ee e4       	ldi	r30, 0x4E	; 78
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	90 81       	ld	r25, Z
    3738:	e9 81       	ldd	r30, Y+1	; 0x01
    373a:	fa 81       	ldd	r31, Y+2	; 0x02
    373c:	84 81       	ldd	r24, Z+4	; 0x04
    373e:	89 2b       	or	r24, r25
    3740:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
    3742:	ac e4       	ldi	r26, 0x4C	; 76
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	e9 81       	ldd	r30, Y+1	; 0x01
    3748:	fa 81       	ldd	r31, Y+2	; 0x02
    374a:	80 81       	ld	r24, Z
    374c:	91 81       	ldd	r25, Z+1	; 0x01
    374e:	11 96       	adiw	r26, 0x01	; 1
    3750:	9c 93       	st	X, r25
    3752:	8e 93       	st	-X, r24

	if(Config_Ptr->mode)
    3754:	e9 81       	ldd	r30, Y+1	; 0x01
    3756:	fa 81       	ldd	r31, Y+2	; 0x02
    3758:	85 81       	ldd	r24, Z+5	; 0x05
    375a:	88 23       	and	r24, r24
    375c:	71 f0       	breq	.+28     	; 0x377a <Timer1_init+0x74>
	{
		OCR1A = Config_Ptr->compare_value;
    375e:	aa e4       	ldi	r26, 0x4A	; 74
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	e9 81       	ldd	r30, Y+1	; 0x01
    3764:	fa 81       	ldd	r31, Y+2	; 0x02
    3766:	82 81       	ldd	r24, Z+2	; 0x02
    3768:	93 81       	ldd	r25, Z+3	; 0x03
    376a:	11 96       	adiw	r26, 0x01	; 1
    376c:	9c 93       	st	X, r25
    376e:	8e 93       	st	-X, r24
		TIMSK = (1<<OCIE1A);
    3770:	e9 e5       	ldi	r30, 0x59	; 89
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 e1       	ldi	r24, 0x10	; 16
    3776:	80 83       	st	Z, r24
    3778:	04 c0       	rjmp	.+8      	; 0x3782 <Timer1_init+0x7c>
	}
	else
	{
		TIMSK = (1<<TOIE1);
    377a:	e9 e5       	ldi	r30, 0x59	; 89
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	84 e0       	ldi	r24, 0x04	; 4
    3780:	80 83       	st	Z, r24
	}
}
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	cf 91       	pop	r28
    3788:	df 91       	pop	r29
    378a:	08 95       	ret

0000378c <Timer1_deInit>:
 * Description
 	 * Function to disable the Timer1.
* Inputs: None
* Return: None
 */
void Timer1_deInit(void){
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    3794:	ef e4       	ldi	r30, 0x4F	; 79
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	10 82       	st	Z, r1
	TCCR1B = 0;
    379a:	ee e4       	ldi	r30, 0x4E	; 78
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	10 82       	st	Z, r1
	TCNT1 = 0;
    37a0:	ec e4       	ldi	r30, 0x4C	; 76
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	11 82       	std	Z+1, r1	; 0x01
    37a6:	10 82       	st	Z, r1
	OCR1A = 0;
    37a8:	ea e4       	ldi	r30, 0x4A	; 74
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	11 82       	std	Z+1, r1	; 0x01
    37ae:	10 82       	st	Z, r1
	TIMSK = 0;
    37b0:	e9 e5       	ldi	r30, 0x59	; 89
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	10 82       	st	Z, r1
}
    37b6:	cf 91       	pop	r28
    37b8:	df 91       	pop	r29
    37ba:	08 95       	ret

000037bc <Timer1_setCallBack>:
 * Description
 	 *Function to set the Call Back function address.
* Inputs: pointer to Call Back function.
* Return: None
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    37bc:	df 93       	push	r29
    37be:	cf 93       	push	r28
    37c0:	00 d0       	rcall	.+0      	; 0x37c2 <Timer1_setCallBack+0x6>
    37c2:	cd b7       	in	r28, 0x3d	; 61
    37c4:	de b7       	in	r29, 0x3e	; 62
    37c6:	9a 83       	std	Y+2, r25	; 0x02
    37c8:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	9a 81       	ldd	r25, Y+2	; 0x02
    37ce:	90 93 ff 00 	sts	0x00FF, r25
    37d2:	80 93 fe 00 	sts	0x00FE, r24
}
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <UART_init+0x6>
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <UART_init+0x8>
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	9c 83       	std	Y+4, r25	; 0x04
    37ee:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    37f0:	1a 82       	std	Y+2, r1	; 0x02
    37f2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    37f4:	eb e2       	ldi	r30, 0x2B	; 43
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    37fc:	ea e2       	ldi	r30, 0x2A	; 42
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	88 e1       	ldi	r24, 0x18	; 24
    3802:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3804:	e0 e4       	ldi	r30, 0x40	; 64
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 e8       	ldi	r24, 0x80	; 128
    380a:	80 83       	st	Z, r24
	UCSRC |= Config_Ptr->bit_data;
    380c:	a0 e4       	ldi	r26, 0x40	; 64
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	e0 e4       	ldi	r30, 0x40	; 64
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	90 81       	ld	r25, Z
    3816:	eb 81       	ldd	r30, Y+3	; 0x03
    3818:	fc 81       	ldd	r31, Y+4	; 0x04
    381a:	80 81       	ld	r24, Z
    381c:	89 2b       	or	r24, r25
    381e:	8c 93       	st	X, r24
	UCSRC |= Config_Ptr-> parity;
    3820:	a0 e4       	ldi	r26, 0x40	; 64
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	e0 e4       	ldi	r30, 0x40	; 64
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	90 81       	ld	r25, Z
    382a:	eb 81       	ldd	r30, Y+3	; 0x03
    382c:	fc 81       	ldd	r31, Y+4	; 0x04
    382e:	81 81       	ldd	r24, Z+1	; 0x01
    3830:	89 2b       	or	r24, r25
    3832:	8c 93       	st	X, r24
	UCSRC |= Config_Ptr->stop_bit;
    3834:	a0 e4       	ldi	r26, 0x40	; 64
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e0 e4       	ldi	r30, 0x40	; 64
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	90 81       	ld	r25, Z
    383e:	eb 81       	ldd	r30, Y+3	; 0x03
    3840:	fc 81       	ldd	r31, Y+4	; 0x04
    3842:	82 81       	ldd	r24, Z+2	; 0x02
    3844:	89 2b       	or	r24, r25
    3846:	8c 93       	st	X, r24

	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3848:	eb 81       	ldd	r30, Y+3	; 0x03
    384a:	fc 81       	ldd	r31, Y+4	; 0x04
    384c:	83 81       	ldd	r24, Z+3	; 0x03
    384e:	94 81       	ldd	r25, Z+4	; 0x04
    3850:	a5 81       	ldd	r26, Z+5	; 0x05
    3852:	b6 81       	ldd	r27, Z+6	; 0x06
    3854:	88 0f       	add	r24, r24
    3856:	99 1f       	adc	r25, r25
    3858:	aa 1f       	adc	r26, r26
    385a:	bb 1f       	adc	r27, r27
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	aa 1f       	adc	r26, r26
    3862:	bb 1f       	adc	r27, r27
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	aa 1f       	adc	r26, r26
    386a:	bb 1f       	adc	r27, r27
    386c:	9c 01       	movw	r18, r24
    386e:	ad 01       	movw	r20, r26
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	92 e1       	ldi	r25, 0x12	; 18
    3874:	aa e7       	ldi	r26, 0x7A	; 122
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	bc 01       	movw	r22, r24
    387a:	cd 01       	movw	r24, r26
    387c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__udivmodsi4>
    3880:	da 01       	movw	r26, r20
    3882:	c9 01       	movw	r24, r18
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    388a:	e0 e4       	ldi	r30, 0x40	; 64
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	9a 81       	ldd	r25, Y+2	; 0x02
    3892:	89 2f       	mov	r24, r25
    3894:	99 27       	eor	r25, r25
    3896:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3898:	e9 e2       	ldi	r30, 0x29	; 41
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	80 83       	st	Z, r24
}
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	08 95       	ret

000038ae <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	0f 92       	push	r0
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    38b8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    38ba:	eb e2       	ldi	r30, 0x2B	; 43
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	80 81       	ld	r24, Z
    38c0:	88 2f       	mov	r24, r24
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	80 72       	andi	r24, 0x20	; 32
    38c6:	90 70       	andi	r25, 0x00	; 0
    38c8:	00 97       	sbiw	r24, 0x00	; 0
    38ca:	b9 f3       	breq	.-18     	; 0x38ba <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    38cc:	ec e2       	ldi	r30, 0x2C	; 44
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    38d4:	0f 90       	pop	r0
    38d6:	cf 91       	pop	r28
    38d8:	df 91       	pop	r29
    38da:	08 95       	ret

000038dc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    38e4:	eb e2       	ldi	r30, 0x2B	; 43
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	80 81       	ld	r24, Z
    38ea:	88 23       	and	r24, r24
    38ec:	dc f7       	brge	.-10     	; 0x38e4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    38ee:	ec e2       	ldi	r30, 0x2C	; 44
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
}
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <UART_sendString+0x6>
    3900:	0f 92       	push	r0
    3902:	cd b7       	in	r28, 0x3d	; 61
    3904:	de b7       	in	r29, 0x3e	; 62
    3906:	9b 83       	std	Y+3, r25	; 0x03
    3908:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    390a:	19 82       	std	Y+1, r1	; 0x01
    390c:	0e c0       	rjmp	.+28     	; 0x392a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	28 2f       	mov	r18, r24
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	8a 81       	ldd	r24, Y+2	; 0x02
    3916:	9b 81       	ldd	r25, Y+3	; 0x03
    3918:	fc 01       	movw	r30, r24
    391a:	e2 0f       	add	r30, r18
    391c:	f3 1f       	adc	r31, r19
    391e:	80 81       	ld	r24, Z
    3920:	0e 94 57 1c 	call	0x38ae	; 0x38ae <UART_sendByte>
		i++;
    3924:	89 81       	ldd	r24, Y+1	; 0x01
    3926:	8f 5f       	subi	r24, 0xFF	; 255
    3928:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	28 2f       	mov	r18, r24
    392e:	30 e0       	ldi	r19, 0x00	; 0
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	9b 81       	ldd	r25, Y+3	; 0x03
    3934:	fc 01       	movw	r30, r24
    3936:	e2 0f       	add	r30, r18
    3938:	f3 1f       	adc	r31, r19
    393a:	80 81       	ld	r24, Z
    393c:	88 23       	and	r24, r24
    393e:	39 f7       	brne	.-50     	; 0x390e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	cf 91       	pop	r28
    3948:	df 91       	pop	r29
    394a:	08 95       	ret

0000394c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    394c:	0f 93       	push	r16
    394e:	1f 93       	push	r17
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	00 d0       	rcall	.+0      	; 0x3956 <UART_receiveString+0xa>
    3956:	0f 92       	push	r0
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	9b 83       	std	Y+3, r25	; 0x03
    395e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3960:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	28 2f       	mov	r18, r24
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	8a 81       	ldd	r24, Y+2	; 0x02
    396a:	9b 81       	ldd	r25, Y+3	; 0x03
    396c:	8c 01       	movw	r16, r24
    396e:	02 0f       	add	r16, r18
    3970:	13 1f       	adc	r17, r19
    3972:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <UART_recieveByte>
    3976:	f8 01       	movw	r30, r16
    3978:	80 83       	st	Z, r24
    397a:	0f c0       	rjmp	.+30     	; 0x399a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '=')
	{
		i++;
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	8f 5f       	subi	r24, 0xFF	; 255
    3980:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	28 2f       	mov	r18, r24
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	8a 81       	ldd	r24, Y+2	; 0x02
    398a:	9b 81       	ldd	r25, Y+3	; 0x03
    398c:	8c 01       	movw	r16, r24
    398e:	02 0f       	add	r16, r18
    3990:	13 1f       	adc	r17, r19
    3992:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <UART_recieveByte>
    3996:	f8 01       	movw	r30, r16
    3998:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '=')
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	28 2f       	mov	r18, r24
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	9b 81       	ldd	r25, Y+3	; 0x03
    39a4:	fc 01       	movw	r30, r24
    39a6:	e2 0f       	add	r30, r18
    39a8:	f3 1f       	adc	r31, r19
    39aa:	80 81       	ld	r24, Z
    39ac:	8d 33       	cpi	r24, 0x3D	; 61
    39ae:	31 f7       	brne	.-52     	; 0x397c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	28 2f       	mov	r18, r24
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ba:	fc 01       	movw	r30, r24
    39bc:	e2 0f       	add	r30, r18
    39be:	f3 1f       	adc	r31, r19
    39c0:	10 82       	st	Z, r1
}
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	cf 91       	pop	r28
    39ca:	df 91       	pop	r29
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	08 95       	ret

000039d2 <__udivmodsi4>:
    39d2:	a1 e2       	ldi	r26, 0x21	; 33
    39d4:	1a 2e       	mov	r1, r26
    39d6:	aa 1b       	sub	r26, r26
    39d8:	bb 1b       	sub	r27, r27
    39da:	fd 01       	movw	r30, r26
    39dc:	0d c0       	rjmp	.+26     	; 0x39f8 <__udivmodsi4_ep>

000039de <__udivmodsi4_loop>:
    39de:	aa 1f       	adc	r26, r26
    39e0:	bb 1f       	adc	r27, r27
    39e2:	ee 1f       	adc	r30, r30
    39e4:	ff 1f       	adc	r31, r31
    39e6:	a2 17       	cp	r26, r18
    39e8:	b3 07       	cpc	r27, r19
    39ea:	e4 07       	cpc	r30, r20
    39ec:	f5 07       	cpc	r31, r21
    39ee:	20 f0       	brcs	.+8      	; 0x39f8 <__udivmodsi4_ep>
    39f0:	a2 1b       	sub	r26, r18
    39f2:	b3 0b       	sbc	r27, r19
    39f4:	e4 0b       	sbc	r30, r20
    39f6:	f5 0b       	sbc	r31, r21

000039f8 <__udivmodsi4_ep>:
    39f8:	66 1f       	adc	r22, r22
    39fa:	77 1f       	adc	r23, r23
    39fc:	88 1f       	adc	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	1a 94       	dec	r1
    3a02:	69 f7       	brne	.-38     	; 0x39de <__udivmodsi4_loop>
    3a04:	60 95       	com	r22
    3a06:	70 95       	com	r23
    3a08:	80 95       	com	r24
    3a0a:	90 95       	com	r25
    3a0c:	9b 01       	movw	r18, r22
    3a0e:	ac 01       	movw	r20, r24
    3a10:	bd 01       	movw	r22, r26
    3a12:	cf 01       	movw	r24, r30
    3a14:	08 95       	ret

00003a16 <__prologue_saves__>:
    3a16:	2f 92       	push	r2
    3a18:	3f 92       	push	r3
    3a1a:	4f 92       	push	r4
    3a1c:	5f 92       	push	r5
    3a1e:	6f 92       	push	r6
    3a20:	7f 92       	push	r7
    3a22:	8f 92       	push	r8
    3a24:	9f 92       	push	r9
    3a26:	af 92       	push	r10
    3a28:	bf 92       	push	r11
    3a2a:	cf 92       	push	r12
    3a2c:	df 92       	push	r13
    3a2e:	ef 92       	push	r14
    3a30:	ff 92       	push	r15
    3a32:	0f 93       	push	r16
    3a34:	1f 93       	push	r17
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	ca 1b       	sub	r28, r26
    3a40:	db 0b       	sbc	r29, r27
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	de bf       	out	0x3e, r29	; 62
    3a48:	0f be       	out	0x3f, r0	; 63
    3a4a:	cd bf       	out	0x3d, r28	; 61
    3a4c:	09 94       	ijmp

00003a4e <__epilogue_restores__>:
    3a4e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a50:	39 88       	ldd	r3, Y+17	; 0x11
    3a52:	48 88       	ldd	r4, Y+16	; 0x10
    3a54:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a56:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a58:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a60:	b9 84       	ldd	r11, Y+9	; 0x09
    3a62:	c8 84       	ldd	r12, Y+8	; 0x08
    3a64:	df 80       	ldd	r13, Y+7	; 0x07
    3a66:	ee 80       	ldd	r14, Y+6	; 0x06
    3a68:	fd 80       	ldd	r15, Y+5	; 0x05
    3a6a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a6c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a6e:	aa 81       	ldd	r26, Y+2	; 0x02
    3a70:	b9 81       	ldd	r27, Y+1	; 0x01
    3a72:	ce 0f       	add	r28, r30
    3a74:	d1 1d       	adc	r29, r1
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	de bf       	out	0x3e, r29	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	cd bf       	out	0x3d, r28	; 61
    3a80:	ed 01       	movw	r28, r26
    3a82:	08 95       	ret

00003a84 <itoa>:
    3a84:	fb 01       	movw	r30, r22
    3a86:	9f 01       	movw	r18, r30
    3a88:	e8 94       	clt
    3a8a:	42 30       	cpi	r20, 0x02	; 2
    3a8c:	c4 f0       	brlt	.+48     	; 0x3abe <itoa+0x3a>
    3a8e:	45 32       	cpi	r20, 0x25	; 37
    3a90:	b4 f4       	brge	.+44     	; 0x3abe <itoa+0x3a>
    3a92:	4a 30       	cpi	r20, 0x0A	; 10
    3a94:	29 f4       	brne	.+10     	; 0x3aa0 <itoa+0x1c>
    3a96:	97 fb       	bst	r25, 7
    3a98:	1e f4       	brtc	.+6      	; 0x3aa0 <itoa+0x1c>
    3a9a:	90 95       	com	r25
    3a9c:	81 95       	neg	r24
    3a9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa0:	64 2f       	mov	r22, r20
    3aa2:	77 27       	eor	r23, r23
    3aa4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__udivmodhi4>
    3aa8:	80 5d       	subi	r24, 0xD0	; 208
    3aaa:	8a 33       	cpi	r24, 0x3A	; 58
    3aac:	0c f0       	brlt	.+2      	; 0x3ab0 <itoa+0x2c>
    3aae:	89 5d       	subi	r24, 0xD9	; 217
    3ab0:	81 93       	st	Z+, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	00 97       	sbiw	r24, 0x00	; 0
    3ab6:	a1 f7       	brne	.-24     	; 0x3aa0 <itoa+0x1c>
    3ab8:	16 f4       	brtc	.+4      	; 0x3abe <itoa+0x3a>
    3aba:	5d e2       	ldi	r21, 0x2D	; 45
    3abc:	51 93       	st	Z+, r21
    3abe:	10 82       	st	Z, r1
    3ac0:	c9 01       	movw	r24, r18
    3ac2:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <strrev>

00003ac6 <strrev>:
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	fc 01       	movw	r30, r24
    3aca:	67 2f       	mov	r22, r23
    3acc:	71 91       	ld	r23, Z+
    3ace:	77 23       	and	r23, r23
    3ad0:	e1 f7       	brne	.-8      	; 0x3aca <strrev+0x4>
    3ad2:	32 97       	sbiw	r30, 0x02	; 2
    3ad4:	04 c0       	rjmp	.+8      	; 0x3ade <strrev+0x18>
    3ad6:	7c 91       	ld	r23, X
    3ad8:	6d 93       	st	X+, r22
    3ada:	70 83       	st	Z, r23
    3adc:	62 91       	ld	r22, -Z
    3ade:	ae 17       	cp	r26, r30
    3ae0:	bf 07       	cpc	r27, r31
    3ae2:	c8 f3       	brcs	.-14     	; 0x3ad6 <strrev+0x10>
    3ae4:	08 95       	ret

00003ae6 <__udivmodhi4>:
    3ae6:	aa 1b       	sub	r26, r26
    3ae8:	bb 1b       	sub	r27, r27
    3aea:	51 e1       	ldi	r21, 0x11	; 17
    3aec:	07 c0       	rjmp	.+14     	; 0x3afc <__udivmodhi4_ep>

00003aee <__udivmodhi4_loop>:
    3aee:	aa 1f       	adc	r26, r26
    3af0:	bb 1f       	adc	r27, r27
    3af2:	a6 17       	cp	r26, r22
    3af4:	b7 07       	cpc	r27, r23
    3af6:	10 f0       	brcs	.+4      	; 0x3afc <__udivmodhi4_ep>
    3af8:	a6 1b       	sub	r26, r22
    3afa:	b7 0b       	sbc	r27, r23

00003afc <__udivmodhi4_ep>:
    3afc:	88 1f       	adc	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	5a 95       	dec	r21
    3b02:	a9 f7       	brne	.-22     	; 0x3aee <__udivmodhi4_loop>
    3b04:	80 95       	com	r24
    3b06:	90 95       	com	r25
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	08 95       	ret

00003b0e <_exit>:
    3b0e:	f8 94       	cli

00003b10 <__stop_program>:
    3b10:	ff cf       	rjmp	.-2      	; 0x3b10 <__stop_program>
